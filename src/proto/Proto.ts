// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "Proto.proto" (package "proto", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message proto.PacketWrapper
 */
export interface PacketWrapper {
    /**
     * @generated from protobuf field: repeated proto.Packet packet = 1;
     */
    packet: Packet[];
}
/**
 * @generated from protobuf message proto.Packet
 */
export interface Packet {
    /**
     * @generated from protobuf oneof: data
     */
    data: {
        oneofKind: "reqLogin";
        /**
         * @generated from protobuf field: proto.ReqLogin reqLogin = 1;
         */
        reqLogin: ReqLogin;
    } | {
        oneofKind: "reqRelogin";
        /**
         * @generated from protobuf field: proto.ReqRelogin reqRelogin = 2;
         */
        reqRelogin: ReqRelogin;
    } | {
        oneofKind: "resLogin";
        /**
         * @generated from protobuf field: proto.ResLogin resLogin = 3;
         */
        resLogin: ResLogin;
    } | {
        oneofKind: "resUserAlert";
        /**
         * @generated from protobuf field: proto.ResUserAlert resUserAlert = 4;
         */
        resUserAlert: ResUserAlert;
    } | {
        oneofKind: "reqLogout";
        /**
         * @generated from protobuf field: proto.ReqLogout reqLogout = 5;
         */
        reqLogout: ReqLogout;
    } | {
        oneofKind: "resLogout";
        /**
         * @generated from protobuf field: proto.ResLogout resLogout = 6;
         */
        resLogout: ResLogout;
    } | {
        oneofKind: "reqForgotPassword";
        /**
         * @generated from protobuf field: proto.ReqForgotPassword reqForgotPassword = 7;
         */
        reqForgotPassword: ReqForgotPassword;
    } | {
        oneofKind: "reqVerifyForgotPassword";
        /**
         * @generated from protobuf field: proto.ReqVerifyForgotPassword reqVerifyForgotPassword = 8;
         */
        reqVerifyForgotPassword: ReqVerifyForgotPassword;
    } | {
        oneofKind: "resVerifyForgotPassword";
        /**
         * @generated from protobuf field: proto.ResVerifyForgotPassword resVerifyForgotPassword = 9;
         */
        resVerifyForgotPassword: ResVerifyForgotPassword;
    } | {
        oneofKind: "reqChangePasswordForgot";
        /**
         * @generated from protobuf field: proto.ReqChangePasswordForgot reqChangePasswordForgot = 10;
         */
        reqChangePasswordForgot: ReqChangePasswordForgot;
    } | {
        oneofKind: "resChangePasswordForgot";
        /**
         * @generated from protobuf field: proto.ResChangePasswordForgot resChangePasswordForgot = 11;
         */
        resChangePasswordForgot: ResChangePasswordForgot;
    } | {
        oneofKind: "resForgotPassword";
        /**
         * @generated from protobuf field: proto.ResForgotPassword resForgotPassword = 12;
         */
        resForgotPassword: ResForgotPassword;
    } | {
        oneofKind: "reqRegister";
        /**
         * @generated from protobuf field: proto.ReqRegister reqRegister = 13;
         */
        reqRegister: ReqRegister;
    } | {
        oneofKind: "resRegister";
        /**
         * @generated from protobuf field: proto.ResRegister resRegister = 14;
         */
        resRegister: ResRegister;
    } | {
        oneofKind: "reqUpdateUserInfo";
        /**
         * @generated from protobuf field: proto.ReqUpdateUserInfo reqUpdateUserInfo = 15;
         */
        reqUpdateUserInfo: ReqUpdateUserInfo;
    } | {
        oneofKind: "resUserInfo";
        /**
         * @generated from protobuf field: proto.ResUserInfo resUserInfo = 16;
         */
        resUserInfo: ResUserInfo;
    } | {
        oneofKind: "reqCreateRoom";
        /**
         * @generated from protobuf field: proto.ReqCreateRoom reqCreateRoom = 17;
         */
        reqCreateRoom: ReqCreateRoom;
    } | {
        oneofKind: "resCreateRoom";
        /**
         * @generated from protobuf field: proto.ResCreateRoom resCreateRoom = 18;
         */
        resCreateRoom: ResCreateRoom;
    } | {
        oneofKind: "reqJoinRoom";
        /**
         * @generated from protobuf field: proto.ReqJoinRoom reqJoinRoom = 19;
         */
        reqJoinRoom: ReqJoinRoom;
    } | {
        oneofKind: "resJoinRoom";
        /**
         * @generated from protobuf field: proto.ResJoinRoom resJoinRoom = 20;
         */
        resJoinRoom: ResJoinRoom;
    } | {
        oneofKind: "reqOutRoom";
        /**
         * @generated from protobuf field: proto.ReqOutRoom reqOutRoom = 21;
         */
        reqOutRoom: ReqOutRoom;
    } | {
        oneofKind: "resOutRoom";
        /**
         * @generated from protobuf field: proto.ResOutRoom resOutRoom = 22;
         */
        resOutRoom: ResOutRoom;
    } | {
        oneofKind: "reqCloseRoom";
        /**
         * @generated from protobuf field: proto.ReqCloseRoom reqCloseRoom = 23;
         */
        reqCloseRoom: ReqCloseRoom;
    } | {
        oneofKind: "resCloseRoom";
        /**
         * @generated from protobuf field: proto.ResCloseRoom resCloseRoom = 24;
         */
        resCloseRoom: ResCloseRoom;
    } | {
        oneofKind: "reqVerify";
        /**
         * @generated from protobuf field: proto.ReqVerify reqVerify = 25;
         */
        reqVerify: ReqVerify;
    } | {
        oneofKind: "resVerify";
        /**
         * @generated from protobuf field: proto.ResVerify resVerify = 26;
         */
        resVerify: ResVerify;
    } | {
        oneofKind: "reqChangePassword";
        /**
         * @generated from protobuf field: proto.ReqChangePassword reqChangePassword = 27;
         */
        reqChangePassword: ReqChangePassword;
    } | {
        oneofKind: "resChangePassword";
        /**
         * @generated from protobuf field: proto.ResChangePassword resChangePassword = 28;
         */
        resChangePassword: ResChangePassword;
    } | {
        oneofKind: "createExamRequest";
        /**
         * @generated from protobuf field: proto.CreateExamRequest createExamRequest = 29;
         */
        createExamRequest: CreateExamRequest;
    } | {
        oneofKind: "createExamResponse";
        /**
         * @generated from protobuf field: proto.CreateExamResponse createExamResponse = 30;
         */
        createExamResponse: CreateExamResponse;
    } | {
        oneofKind: "updateExamRequest";
        /**
         * @generated from protobuf field: proto.UpdateExamRequest updateExamRequest = 31;
         */
        updateExamRequest: UpdateExamRequest;
    } | {
        oneofKind: "updateExamResponse";
        /**
         * @generated from protobuf field: proto.UpdateExamResponse updateExamResponse = 32;
         */
        updateExamResponse: UpdateExamResponse;
    } | {
        oneofKind: "deleteExamRequest";
        /**
         * @generated from protobuf field: proto.DeleteExamRequest deleteExamRequest = 33;
         */
        deleteExamRequest: DeleteExamRequest;
    } | {
        oneofKind: "deleteExamResponse";
        /**
         * @generated from protobuf field: proto.DeleteExamResponse deleteExamResponse = 34;
         */
        deleteExamResponse: DeleteExamResponse;
    } | {
        oneofKind: "getExamRequest";
        /**
         * @generated from protobuf field: proto.GetExamRequest getExamRequest = 35;
         */
        getExamRequest: GetExamRequest;
    } | {
        oneofKind: "getExamResponse";
        /**
         * @generated from protobuf field: proto.GetExamResponse getExamResponse = 36;
         */
        getExamResponse: GetExamResponse;
    } | {
        oneofKind: "getAllExamRequest";
        /**
         * @generated from protobuf field: proto.GetAllExamRequest getAllExamRequest = 37;
         */
        getAllExamRequest: GetAllExamRequest;
    } | {
        oneofKind: "getAllExamResponse";
        /**
         * @generated from protobuf field: proto.GetAllExamResponse getAllExamResponse = 38;
         */
        getAllExamResponse: GetAllExamResponse;
    } | {
        oneofKind: "createQuestionRequest";
        /**
         * @generated from protobuf field: proto.CreateQuestionRequest createQuestionRequest = 39;
         */
        createQuestionRequest: CreateQuestionRequest;
    } | {
        oneofKind: "createQuestionResponse";
        /**
         * @generated from protobuf field: proto.CreateQuestionResponse createQuestionResponse = 40;
         */
        createQuestionResponse: CreateQuestionResponse;
    } | {
        oneofKind: "updateQuestionRequest";
        /**
         * @generated from protobuf field: proto.UpdateQuestionRequest updateQuestionRequest = 41;
         */
        updateQuestionRequest: UpdateQuestionRequest;
    } | {
        oneofKind: "updateQuestionResponse";
        /**
         * @generated from protobuf field: proto.UpdateQuestionResponse updateQuestionResponse = 42;
         */
        updateQuestionResponse: UpdateQuestionResponse;
    } | {
        oneofKind: "deleteQuestionRequest";
        /**
         * @generated from protobuf field: proto.DeleteQuestionRequest deleteQuestionRequest = 43;
         */
        deleteQuestionRequest: DeleteQuestionRequest;
    } | {
        oneofKind: "deleteQuestionResponse";
        /**
         * @generated from protobuf field: proto.DeleteQuestionResponse deleteQuestionResponse = 44;
         */
        deleteQuestionResponse: DeleteQuestionResponse;
    } | {
        oneofKind: "reqStartExam";
        /**
         * @generated from protobuf field: proto.ReqStartExam reqStartExam = 45;
         */
        reqStartExam: ReqStartExam;
    } | {
        oneofKind: "resStartExam";
        /**
         * @generated from protobuf field: proto.ResStartExam resStartExam = 46;
         */
        resStartExam: ResStartExam;
    } | {
        oneofKind: "reqEndExam";
        /**
         * @generated from protobuf field: proto.ReqEndExam reqEndExam = 47;
         */
        reqEndExam: ReqEndExam;
    } | {
        oneofKind: "resEndExam";
        /**
         * @generated from protobuf field: proto.ResEndExam resEndExam = 48;
         */
        resEndExam: ResEndExam;
    } | {
        oneofKind: "reqGetNextQuestion";
        /**
         * @generated from protobuf field: proto.ReqGetNextQuestion reqGetNextQuestion = 49;
         */
        reqGetNextQuestion: ReqGetNextQuestion;
    } | {
        oneofKind: "reqCheckQuestionAnswer";
        /**
         * @generated from protobuf field: proto.ReqCheckQuestionAnswer reqCheckQuestionAnswer = 50;
         */
        reqCheckQuestionAnswer: ReqCheckQuestionAnswer;
    } | {
        oneofKind: "resCheckQuestionAnswer";
        /**
         * @generated from protobuf field: proto.ResCheckQuestionAnswer resCheckQuestionAnswer = 51;
         */
        resCheckQuestionAnswer: ResCheckQuestionAnswer;
    } | {
        oneofKind: "userScore";
        /**
         * @generated from protobuf field: proto.UserScore userScore = 52;
         */
        userScore: UserScore;
    } | {
        oneofKind: "roomScore";
        /**
         * @generated from protobuf field: proto.RoomScore roomScore = 53;
         */
        roomScore: RoomScore;
    } | {
        oneofKind: "exam";
        /**
         * @generated from protobuf field: proto.Exam exam = 54;
         */
        exam: Exam;
    } | {
        oneofKind: "question";
        /**
         * @generated from protobuf field: proto.Question question = 55;
         */
        question: Question;
    } | {
        oneofKind: "choice";
        /**
         * @generated from protobuf field: proto.Choice choice = 56;
         */
        choice: Choice;
    } | {
        oneofKind: "resGetNextQuestion";
        /**
         * @generated from protobuf field: proto.ResGetNextQuestion resGetNextQuestion = 57;
         */
        resGetNextQuestion: ResGetNextQuestion;
    } | {
        oneofKind: "reqGetRoomScore";
        /**
         * @generated from protobuf field: proto.ReqGetRoomScore reqGetRoomScore = 58;
         */
        reqGetRoomScore: ReqGetRoomScore;
    } | {
        oneofKind: "resGetRoomScore";
        /**
         * @generated from protobuf field: proto.ResGetRoomScore resGetRoomScore = 59;
         */
        resGetRoomScore: ResGetRoomScore;
    } | {
        oneofKind: "report";
        /**
         * @generated from protobuf field: proto.Report report = 60;
         */
        report: Report;
    } | {
        oneofKind: "reqGetReport";
        /**
         * @generated from protobuf field: proto.ReqGetReport reqGetReport = 61;
         */
        reqGetReport: ReqGetReport;
    } | {
        oneofKind: "resGetReport";
        /**
         * @generated from protobuf field: proto.ResGetReport resGetReport = 62;
         */
        resGetReport: ResGetReport;
    } | {
        oneofKind: "reqGetAllReportByHostId";
        /**
         * @generated from protobuf field: proto.ReqGetAllReportByHostId reqGetAllReportByHostId = 63;
         */
        reqGetAllReportByHostId: ReqGetAllReportByHostId;
    } | {
        oneofKind: "reqGetAllReportByPlayerId";
        /**
         * @generated from protobuf field: proto.ReqGetAllReportByPlayerId reqGetAllReportByPlayerId = 64;
         */
        reqGetAllReportByPlayerId: ReqGetAllReportByPlayerId;
    } | {
        oneofKind: "resGetAllReportByHostId";
        /**
         * @generated from protobuf field: proto.ResGetAllReportByHostId resGetAllReportByHostId = 65;
         */
        resGetAllReportByHostId: ResGetAllReportByHostId;
    } | {
        oneofKind: "resGetAllReportByPlayerId";
        /**
         * @generated from protobuf field: proto.ResGetAllReportByPlayerId resGetAllReportByPlayerId = 66;
         */
        resGetAllReportByPlayerId: ResGetAllReportByPlayerId;
    } | {
        oneofKind: "getQuestionRequest";
        /**
         * @generated from protobuf field: proto.GetQuestionRequest getQuestionRequest = 67;
         */
        getQuestionRequest: GetQuestionRequest;
    } | {
        oneofKind: "getQuestionResponse";
        /**
         * @generated from protobuf field: proto.GetQuestionResponse getQuestionResponse = 68;
         */
        getQuestionResponse: GetQuestionResponse;
    } | {
        oneofKind: "reqLockScreen";
        /**
         * @generated from protobuf field: proto.ReqLockScreen reqLockScreen = 69;
         */
        reqLockScreen: ReqLockScreen;
    } | {
        oneofKind: "resLockScreen";
        /**
         * @generated from protobuf field: proto.ResLockScreen resLockScreen = 70;
         */
        resLockScreen: ResLockScreen;
    } | {
        oneofKind: "reqUnlockScreen";
        /**
         * @generated from protobuf field: proto.ReqUnlockScreen reqUnlockScreen = 71;
         */
        reqUnlockScreen: ReqUnlockScreen;
    } | {
        oneofKind: "resUnlockScreen";
        /**
         * @generated from protobuf field: proto.ResUnlockScreen resUnlockScreen = 72;
         */
        resUnlockScreen: ResUnlockScreen;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message proto.ReqLogin
 */
export interface ReqLogin {
    /**
     * @generated from protobuf field: string username = 1;
     */
    username: string;
    /**
     * @generated from protobuf field: string password = 2;
     */
    password: string;
}
/**
 * @generated from protobuf message proto.ReqRelogin
 */
export interface ReqRelogin {
    /**
     * @generated from protobuf field: string username = 1;
     */
    username: string;
    /**
     * @generated from protobuf field: string token = 2;
     */
    token: string;
}
/**
 * @generated from protobuf message proto.ResLogin
 */
export interface ResLogin {
    /**
     * @generated from protobuf field: int32 status = 1;
     */
    status: number; // 200:login thanh cong; 201 login thành công nhưng phải
    /**
     * cập nhật player_name, gender;
     * 400: login không thành công,  sai username or pass, 401: tài khoản bị khóa,
     * 402: tài khoản chưa kích hoạt. 403: user không thể relogin : 404 User login
     * in other device
     *
     * @generated from protobuf field: string token = 2;
     */
    token: string;
    /**
     * @generated from protobuf field: proto.User user = 3;
     */
    user?: User;
}
/**
 * @generated from protobuf message proto.ResUserAlert
 */
export interface ResUserAlert {
    /**
     * @generated from protobuf field: int32 status = 1;
     */
    status: number; // 404 User login in other device
}
/**
 * @generated from protobuf message proto.ReqLogout
 */
export interface ReqLogout {
}
/**
 * @generated from protobuf message proto.ResLogout
 */
export interface ResLogout {
    /**
     * @generated from protobuf field: int32 status = 1;
     */
    status: number; // từ từ định nghĩa
}
/**
 * @generated from protobuf message proto.ReqForgotPassword
 */
export interface ReqForgotPassword {
    /**
     * @generated from protobuf field: string email = 1;
     */
    email: string;
}
/**
 * @generated from protobuf message proto.ReqVerifyForgotPassword
 */
export interface ReqVerifyForgotPassword {
    /**
     * @generated from protobuf field: string email = 1;
     */
    email: string;
    /**
     * @generated from protobuf field: string otp = 2;
     */
    otp: string;
}
/**
 * @generated from protobuf message proto.ResVerifyForgotPassword
 */
export interface ResVerifyForgotPassword {
    /**
     * @generated from protobuf field: int32 status = 1;
     */
    status: number;
}
/**
 * @generated from protobuf message proto.ReqChangePasswordForgot
 */
export interface ReqChangePasswordForgot {
    /**
     * @generated from protobuf field: string password = 1;
     */
    password: string;
    /**
     * @generated from protobuf field: string otp = 2;
     */
    otp: string;
    /**
     * @generated from protobuf field: string email = 3;
     */
    email: string;
}
/**
 * @generated from protobuf message proto.ResChangePasswordForgot
 */
export interface ResChangePasswordForgot {
    /**
     * @generated from protobuf field: int32 status = 1;
     */
    status: number;
}
/**
 * @generated from protobuf message proto.ResForgotPassword
 */
export interface ResForgotPassword {
    /**
     * @generated from protobuf field: int32 status = 1;
     */
    status: number;
}
/**
 * @generated from protobuf message proto.ReqRegister
 */
export interface ReqRegister {
    /**
     * @generated from protobuf field: string username = 1;
     */
    username: string;
    /**
     * @generated from protobuf field: string password = 2;
     */
    password: string;
    /**
     * @generated from protobuf field: string sponsor = 3;
     */
    sponsor: string;
    /**
     * @generated from protobuf field: string phone = 4;
     */
    phone: string;
    /**
     * @generated from protobuf field: string email = 5;
     */
    email: string;
}
/**
 * @generated from protobuf message proto.ResRegister
 */
export interface ResRegister {
    /**
     * @generated from protobuf field: int32 status = 1;
     */
    status: number; // 200 đăng ký thành công; 
}
/**
 * @generated from protobuf message proto.ReqUpdateUserInfo
 */
export interface ReqUpdateUserInfo {
    /**
     * @generated from protobuf field: string playerName = 1;
     */
    playerName: string;
    /**
     * @generated from protobuf field: int32 gender = 2;
     */
    gender: number; // 0 nữ; 1 nam
}
/**
 * @generated from protobuf message proto.ResUserInfo
 */
export interface ResUserInfo {
    /**
     * @generated from protobuf field: proto.User user = 1;
     */
    user?: User;
}
/**
 * @generated from protobuf message proto.User
 */
export interface User {
    /**
     * @generated from protobuf field: int32 userId = 1;
     */
    userId: number;
    /**
     * @generated from protobuf field: string username = 2;
     */
    username: string;
    /**
     * @generated from protobuf field: string playerName = 3;
     */
    playerName: string;
    /**
     * @generated from protobuf field: int32 gender = 4;
     */
    gender: number;
    /**
     * @generated from protobuf field: string email = 6;
     */
    email: string;
    /**
     * @generated from protobuf field: string phone = 7;
     */
    phone: string;
}
/**
 * @generated from protobuf message proto.ReqCreateRoom
 */
export interface ReqCreateRoom {
    /**
     * @generated from protobuf field: int32 userId = 1;
     */
    userId: number;
    /**
     * @generated from protobuf field: int32 testId = 2;
     */
    testId: number;
}
/**
 * @generated from protobuf message proto.ResCreateRoom
 */
export interface ResCreateRoom {
    /**
     * @generated from protobuf field: int32 status = 1;
     */
    status: number;
    /**
     * @generated from protobuf field: int32 roomId = 2;
     */
    roomId: number;
}
/**
 * @generated from protobuf message proto.ReqJoinRoom
 */
export interface ReqJoinRoom {
    /**
     * @generated from protobuf field: int32 roomId = 1;
     */
    roomId: number;
}
/**
 * @generated from protobuf message proto.ResJoinRoom
 */
export interface ResJoinRoom {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string sessionId = 2;
     */
    sessionId: string;
    /**
     * @generated from protobuf field: int32 status = 3;
     */
    status: number;
    /**
     * @generated from protobuf field: string hostId = 4;
     */
    hostId: string;
    /**
     * @generated from protobuf field: int32 totalPlayer = 5;
     */
    totalPlayer: number;
}
/**
 * @generated from protobuf message proto.ReqOutRoom
 */
export interface ReqOutRoom {
    /**
     * @generated from protobuf field: int32 roomId = 1;
     */
    roomId: number;
}
/**
 * @generated from protobuf message proto.ResOutRoom
 */
export interface ResOutRoom {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string sessionId = 2;
     */
    sessionId: string;
}
/**
 * @generated from protobuf message proto.ReqCloseRoom
 */
export interface ReqCloseRoom {
    /**
     * check token truoc, sau do publish xuong redis, doi mess tu redis sau do moi xu ly
     *
     * @generated from protobuf field: int32 roomId = 1;
     */
    roomId: number;
    /**
     * @generated from protobuf field: string token = 2;
     */
    token: string;
}
/**
 * @generated from protobuf message proto.ResCloseRoom
 */
export interface ResCloseRoom {
    /**
     * @generated from protobuf field: int32 status = 1;
     */
    status: number;
}
/**
 * @generated from protobuf message proto.ReqVerify
 */
export interface ReqVerify {
    /**
     * @generated from protobuf field: string email = 1;
     */
    email: string;
    /**
     * @generated from protobuf field: string code = 2;
     */
    code: string;
}
/**
 * @generated from protobuf message proto.ResVerify
 */
export interface ResVerify {
    /**
     * @generated from protobuf field: int32 status = 1;
     */
    status: number;
}
/**
 * @generated from protobuf message proto.ReqChangePassword
 */
export interface ReqChangePassword {
    /**
     * @generated from protobuf field: string oldPassword = 1;
     */
    oldPassword: string;
    /**
     * @generated from protobuf field: string newPassword = 2;
     */
    newPassword: string;
}
/**
 * @generated from protobuf message proto.ResChangePassword
 */
export interface ResChangePassword {
    /**
     * @generated from protobuf field: int32 status = 1;
     */
    status: number;
}
/**
 * @generated from protobuf message proto.CreateExamRequest
 */
export interface CreateExamRequest {
    /**
     * @generated from protobuf field: proto.Exam exam = 1;
     */
    exam?: Exam;
}
/**
 * @generated from protobuf message proto.CreateExamResponse
 */
export interface CreateExamResponse {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
    /**
     * @generated from protobuf field: string message = 2;
     */
    message: string;
    /**
     * @generated from protobuf field: int32 examId = 3;
     */
    examId: number;
    /**
     * @generated from protobuf field: int32 firstQuestionId = 4;
     */
    firstQuestionId: number;
}
/**
 * @generated from protobuf message proto.UpdateExamRequest
 */
export interface UpdateExamRequest {
    /**
     * @generated from protobuf field: proto.Exam exam = 1;
     */
    exam?: Exam;
}
/**
 * @generated from protobuf message proto.UpdateExamResponse
 */
export interface UpdateExamResponse {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
    /**
     * @generated from protobuf field: string message = 2;
     */
    message: string;
}
/**
 * @generated from protobuf message proto.DeleteExamRequest
 */
export interface DeleteExamRequest {
    /**
     * @generated from protobuf field: int32 examId = 1;
     */
    examId: number;
    /**
     * @generated from protobuf field: int32 userId = 2;
     */
    userId: number;
}
/**
 * @generated from protobuf message proto.DeleteExamResponse
 */
export interface DeleteExamResponse {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
    /**
     * @generated from protobuf field: string message = 2;
     */
    message: string;
}
/**
 * @generated from protobuf message proto.Exam
 */
export interface Exam {
    /**
     * @generated from protobuf field: int32 examId = 1;
     */
    examId: number;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: string description = 3;
     */
    description: string;
    /**
     * @generated from protobuf field: repeated proto.Question questions = 4;
     */
    questions: Question[];
    /**
     * @generated from protobuf field: string imageUrl = 5;
     */
    imageUrl: string;
    /**
     * @generated from protobuf field: int32 status = 6;
     */
    status: number;
    /**
     * @generated from protobuf field: string createdAt = 7;
     */
    createdAt: string;
    /**
     * @generated from protobuf field: int32 userId = 8;
     */
    userId: number;
}
/**
 * @generated from protobuf message proto.Question
 */
export interface Question {
    /**
     * @generated from protobuf field: string questionText = 1;
     */
    questionText: string;
    /**
     * @generated from protobuf field: string imageUrl = 2;
     */
    imageUrl: string;
    /**
     * @generated from protobuf field: repeated proto.Choice choices = 3;
     */
    choices: Choice[];
    /**
     * @generated from protobuf field: int32 questionIndex = 4;
     */
    questionIndex: number;
    /**
     * @generated from protobuf field: int32 time = 5;
     */
    time: number;
    /**
     * @generated from protobuf field: int32 questionId = 6;
     */
    questionId: number;
    /**
     * @generated from protobuf field: int32 examId = 7;
     */
    examId: number;
    /**
     * @generated from protobuf field: int32 status = 8;
     */
    status: number;
}
/**
 * @generated from protobuf message proto.Choice
 */
export interface Choice {
    /**
     * @generated from protobuf field: string choiceText = 1;
     */
    choiceText: string;
    /**
     * @generated from protobuf field: string imageUrl = 2;
     */
    imageUrl: string;
    /**
     * @generated from protobuf field: bool isCorrect = 3;
     */
    isCorrect: boolean;
    /**
     * @generated from protobuf field: int32 choiceIndex = 4;
     */
    choiceIndex: number;
    /**
     * @generated from protobuf field: int32 choiceId = 5;
     */
    choiceId: number;
    /**
     * @generated from protobuf field: int32 questionId = 6;
     */
    questionId: number;
    /**
     * @generated from protobuf field: int32 status = 7;
     */
    status: number;
}
/**
 * @generated from protobuf message proto.CreateQuestionRequest
 */
export interface CreateQuestionRequest {
    /**
     * @generated from protobuf field: int32 examId = 1;
     */
    examId: number;
}
/**
 * @generated from protobuf message proto.CreateQuestionResponse
 */
export interface CreateQuestionResponse {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
    /**
     * @generated from protobuf field: int32 questionId = 2;
     */
    questionId: number;
}
/**
 * @generated from protobuf message proto.UpdateQuestionRequest
 */
export interface UpdateQuestionRequest {
    /**
     * @generated from protobuf field: proto.Question question = 1;
     */
    question?: Question;
}
/**
 * @generated from protobuf message proto.UpdateQuestionResponse
 */
export interface UpdateQuestionResponse {
    /**
     * @generated from protobuf field: proto.Question question = 3;
     */
    question?: Question;
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
    /**
     * @generated from protobuf field: string message = 2;
     */
    message: string;
}
/**
 * @generated from protobuf message proto.DeleteQuestionRequest
 */
export interface DeleteQuestionRequest {
    /**
     * @generated from protobuf field: int32 questionId = 1;
     */
    questionId: number;
    /**
     * @generated from protobuf field: int32 userId = 2;
     */
    userId: number;
}
/**
 * @generated from protobuf message proto.DeleteQuestionResponse
 */
export interface DeleteQuestionResponse {
    /**
     * @generated from protobuf field: int32 questionId = 3;
     */
    questionId: number;
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
    /**
     * @generated from protobuf field: string message = 2;
     */
    message: string;
}
/**
 * @generated from protobuf message proto.GetQuestionRequest
 */
export interface GetQuestionRequest {
    /**
     * @generated from protobuf field: int32 questionId = 1;
     */
    questionId: number;
}
/**
 * @generated from protobuf message proto.GetQuestionResponse
 */
export interface GetQuestionResponse {
    /**
     * @generated from protobuf field: proto.Question question = 1;
     */
    question?: Question;
}
/**
 * @generated from protobuf message proto.GetExamRequest
 */
export interface GetExamRequest {
    /**
     * @generated from protobuf field: int32 examId = 1;
     */
    examId: number;
}
/**
 * @generated from protobuf message proto.GetExamResponse
 */
export interface GetExamResponse {
    /**
     * @generated from protobuf field: proto.Exam exam = 1;
     */
    exam?: Exam;
}
/**
 * @generated from protobuf message proto.GetAllExamRequest
 */
export interface GetAllExamRequest {
    /**
     * @generated from protobuf field: int32 userId = 1;
     */
    userId: number;
}
/**
 * @generated from protobuf message proto.GetAllExamResponse
 */
export interface GetAllExamResponse {
    /**
     * @generated from protobuf field: repeated proto.Exam exam = 1;
     */
    exam: Exam[];
}
/**
 * @generated from protobuf message proto.ReqStartExam
 */
export interface ReqStartExam {
    /**
     * @generated from protobuf field: int32 roomId = 1;
     */
    roomId: number;
    /**
     * @generated from protobuf field: int32 examId = 2;
     */
    examId: number;
    /**
     * @generated from protobuf field: int32 hostId = 3;
     */
    hostId: number;
}
/**
 * @generated from protobuf message proto.ResStartExam
 */
export interface ResStartExam {
    /**
     * @generated from protobuf field: int32 examSessionId = 1;
     */
    examSessionId: number;
    /**
     * @generated from protobuf field: proto.Question question = 2;
     */
    question?: Question;
}
/**
 * @generated from protobuf message proto.ReqEndExam
 */
export interface ReqEndExam {
    /**
     * @generated from protobuf field: int32 examId = 1;
     */
    examId: number;
    /**
     * @generated from protobuf field: int32 hostId = 2;
     */
    hostId: number;
    /**
     * @generated from protobuf field: int32 roomId = 3;
     */
    roomId: number;
}
/**
 * @generated from protobuf message proto.ResEndExam
 */
export interface ResEndExam {
    /**
     * @generated from protobuf field: int32 status = 1;
     */
    status: number;
    /**
     * @generated from protobuf field: proto.RoomScore resRoomScore = 2;
     */
    resRoomScore?: RoomScore;
}
/**
 * @generated from protobuf message proto.ReqGetNextQuestion
 */
export interface ReqGetNextQuestion {
    /**
     * @generated from protobuf field: int32 examId = 1;
     */
    examId: number;
    /**
     * @generated from protobuf field: int32 questionId = 2;
     */
    questionId: number;
    /**
     * @generated from protobuf field: int32 roomId = 3;
     */
    roomId: number;
}
/**
 * @generated from protobuf message proto.ResGetNextQuestion
 */
export interface ResGetNextQuestion {
    /**
     * @generated from protobuf field: int32 status = 1;
     */
    status: number;
    /**
     * @generated from protobuf field: proto.Question question = 2;
     */
    question?: Question;
    /**
     * @generated from protobuf field: int32 totalQuestion = 3;
     */
    totalQuestion: number;
}
/**
 * @generated from protobuf message proto.ReqCheckQuestionAnswer
 */
export interface ReqCheckQuestionAnswer {
    /**
     * kiem tra dap an cua cau hoi va luu lai dap an da chon cua nguoi choi
     *
     * @generated from protobuf field: int32 examSessionId = 3;
     */
    examSessionId: number;
    /**
     * @generated from protobuf field: int32 userId = 1;
     */
    userId: number;
    /**
     * @generated from protobuf field: int32 questionId = 2;
     */
    questionId: number;
    /**
     * @generated from protobuf field: int32 choiceId = 4;
     */
    choiceId: number;
    /**
     * @generated from protobuf field: int32 roomId = 5;
     */
    roomId: number;
}
/**
 * @generated from protobuf message proto.ResCheckQuestionAnswer
 */
export interface ResCheckQuestionAnswer {
    /**
     * tra ve ket qua cua cau hoi
     *
     * @generated from protobuf field: int32 status = 1;
     */
    status: number;
    /**
     * @generated from protobuf field: int32 questionId = 2;
     */
    questionId: number;
}
/**
 * @generated from protobuf message proto.UserScore
 */
export interface UserScore {
    /**
     * @generated from protobuf field: string userName = 1;
     */
    userName: string;
    /**
     * @generated from protobuf field: int32 score = 2;
     */
    score: number;
}
/**
 * @generated from protobuf message proto.RoomScore
 */
export interface RoomScore {
    /**
     * @generated from protobuf field: int32 totalQuestion = 2;
     */
    totalQuestion: number; // thi la chua bat dau
    /**
     * @generated from protobuf field: repeated proto.UserScore userScores = 1;
     */
    userScores: UserScore[];
}
/**
 * @generated from protobuf message proto.ReqGetRoomScore
 */
export interface ReqGetRoomScore {
    /**
     * @generated from protobuf field: int32 roomId = 1;
     */
    roomId: number;
}
/**
 * @generated from protobuf message proto.ResGetRoomScore
 */
export interface ResGetRoomScore {
    /**
     * @generated from protobuf field: proto.RoomScore roomScore = 1;
     */
    roomScore?: RoomScore;
}
/**
 * @generated from protobuf message proto.Report
 */
export interface Report {
    /**
     * @generated from protobuf field: int32 examSessionId = 5;
     */
    examSessionId: number;
    /**
     * @generated from protobuf field: string ExamTitle = 1 [json_name = "ExamTitle"];
     */
    examTitle: string;
    /**
     * @generated from protobuf field: string HostName = 2 [json_name = "HostName"];
     */
    hostName: string;
    /**
     * @generated from protobuf field: string startTime = 3;
     */
    startTime: string;
    /**
     * @generated from protobuf field: string endTime = 4;
     */
    endTime: string;
    /**
     * @generated from protobuf field: proto.RoomScore roomScore = 6;
     */
    roomScore?: RoomScore;
}
/**
 * @generated from protobuf message proto.ReqGetReport
 */
export interface ReqGetReport {
    /**
     * @generated from protobuf field: int32 examSessionId = 1;
     */
    examSessionId: number;
}
/**
 * @generated from protobuf message proto.ResGetReport
 */
export interface ResGetReport {
    /**
     * @generated from protobuf field: proto.Report report = 1;
     */
    report?: Report;
}
/**
 * @generated from protobuf message proto.ReqGetAllReportByHostId
 */
export interface ReqGetAllReportByHostId {
    /**
     * @generated from protobuf field: int32 hostId = 1;
     */
    hostId: number;
}
/**
 * @generated from protobuf message proto.ResGetAllReportByHostId
 */
export interface ResGetAllReportByHostId {
    /**
     * @generated from protobuf field: repeated proto.Report reports = 1;
     */
    reports: Report[];
}
/**
 * @generated from protobuf message proto.ReqGetAllReportByPlayerId
 */
export interface ReqGetAllReportByPlayerId {
    /**
     * @generated from protobuf field: int32 userId = 1;
     */
    userId: number;
}
/**
 * @generated from protobuf message proto.ResGetAllReportByPlayerId
 */
export interface ResGetAllReportByPlayerId {
    /**
     * @generated from protobuf field: repeated proto.Report reports = 1;
     */
    reports: Report[];
}
/**
 * @generated from protobuf message proto.ReqLockScreen
 */
export interface ReqLockScreen {
    /**
     * @generated from protobuf field: int32 userId = 1;
     */
    userId: number; // hostId
    /**
     * @generated from protobuf field: int32 roomId = 2;
     */
    roomId: number;
}
/**
 * @generated from protobuf message proto.ResLockScreen
 */
export interface ResLockScreen {
    /**
     * @generated from protobuf field: int32 status = 1;
     */
    status: number;
}
/**
 * @generated from protobuf message proto.ReqUnlockScreen
 */
export interface ReqUnlockScreen {
    /**
     * @generated from protobuf field: int32 userId = 1;
     */
    userId: number; // hostId
    /**
     * @generated from protobuf field: int32 roomId = 2;
     */
    roomId: number;
}
/**
 * @generated from protobuf message proto.ResUnlockScreen
 */
export interface ResUnlockScreen {
    /**
     * @generated from protobuf field: int32 status = 1;
     */
    status: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class PacketWrapper$Type extends MessageType<PacketWrapper> {
    constructor() {
        super("proto.PacketWrapper", [
            { no: 1, name: "packet", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Packet }
        ]);
    }
    create(value?: PartialMessage<PacketWrapper>): PacketWrapper {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.packet = [];
        if (value !== undefined)
            reflectionMergePartial<PacketWrapper>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PacketWrapper): PacketWrapper {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated proto.Packet packet */ 1:
                    message.packet.push(Packet.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PacketWrapper, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated proto.Packet packet = 1; */
        for (let i = 0; i < message.packet.length; i++)
            Packet.internalBinaryWrite(message.packet[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.PacketWrapper
 */
export const PacketWrapper = new PacketWrapper$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Packet$Type extends MessageType<Packet> {
    constructor() {
        super("proto.Packet", [
            { no: 1, name: "reqLogin", kind: "message", oneof: "data", T: () => ReqLogin },
            { no: 2, name: "reqRelogin", kind: "message", oneof: "data", T: () => ReqRelogin },
            { no: 3, name: "resLogin", kind: "message", oneof: "data", T: () => ResLogin },
            { no: 4, name: "resUserAlert", kind: "message", oneof: "data", T: () => ResUserAlert },
            { no: 5, name: "reqLogout", kind: "message", oneof: "data", T: () => ReqLogout },
            { no: 6, name: "resLogout", kind: "message", oneof: "data", T: () => ResLogout },
            { no: 7, name: "reqForgotPassword", kind: "message", oneof: "data", T: () => ReqForgotPassword },
            { no: 8, name: "reqVerifyForgotPassword", kind: "message", oneof: "data", T: () => ReqVerifyForgotPassword },
            { no: 9, name: "resVerifyForgotPassword", kind: "message", oneof: "data", T: () => ResVerifyForgotPassword },
            { no: 10, name: "reqChangePasswordForgot", kind: "message", oneof: "data", T: () => ReqChangePasswordForgot },
            { no: 11, name: "resChangePasswordForgot", kind: "message", oneof: "data", T: () => ResChangePasswordForgot },
            { no: 12, name: "resForgotPassword", kind: "message", oneof: "data", T: () => ResForgotPassword },
            { no: 13, name: "reqRegister", kind: "message", oneof: "data", T: () => ReqRegister },
            { no: 14, name: "resRegister", kind: "message", oneof: "data", T: () => ResRegister },
            { no: 15, name: "reqUpdateUserInfo", kind: "message", oneof: "data", T: () => ReqUpdateUserInfo },
            { no: 16, name: "resUserInfo", kind: "message", oneof: "data", T: () => ResUserInfo },
            { no: 17, name: "reqCreateRoom", kind: "message", oneof: "data", T: () => ReqCreateRoom },
            { no: 18, name: "resCreateRoom", kind: "message", oneof: "data", T: () => ResCreateRoom },
            { no: 19, name: "reqJoinRoom", kind: "message", oneof: "data", T: () => ReqJoinRoom },
            { no: 20, name: "resJoinRoom", kind: "message", oneof: "data", T: () => ResJoinRoom },
            { no: 21, name: "reqOutRoom", kind: "message", oneof: "data", T: () => ReqOutRoom },
            { no: 22, name: "resOutRoom", kind: "message", oneof: "data", T: () => ResOutRoom },
            { no: 23, name: "reqCloseRoom", kind: "message", oneof: "data", T: () => ReqCloseRoom },
            { no: 24, name: "resCloseRoom", kind: "message", oneof: "data", T: () => ResCloseRoom },
            { no: 25, name: "reqVerify", kind: "message", oneof: "data", T: () => ReqVerify },
            { no: 26, name: "resVerify", kind: "message", oneof: "data", T: () => ResVerify },
            { no: 27, name: "reqChangePassword", kind: "message", oneof: "data", T: () => ReqChangePassword },
            { no: 28, name: "resChangePassword", kind: "message", oneof: "data", T: () => ResChangePassword },
            { no: 29, name: "createExamRequest", kind: "message", oneof: "data", T: () => CreateExamRequest },
            { no: 30, name: "createExamResponse", kind: "message", oneof: "data", T: () => CreateExamResponse },
            { no: 31, name: "updateExamRequest", kind: "message", oneof: "data", T: () => UpdateExamRequest },
            { no: 32, name: "updateExamResponse", kind: "message", oneof: "data", T: () => UpdateExamResponse },
            { no: 33, name: "deleteExamRequest", kind: "message", oneof: "data", T: () => DeleteExamRequest },
            { no: 34, name: "deleteExamResponse", kind: "message", oneof: "data", T: () => DeleteExamResponse },
            { no: 35, name: "getExamRequest", kind: "message", oneof: "data", T: () => GetExamRequest },
            { no: 36, name: "getExamResponse", kind: "message", oneof: "data", T: () => GetExamResponse },
            { no: 37, name: "getAllExamRequest", kind: "message", oneof: "data", T: () => GetAllExamRequest },
            { no: 38, name: "getAllExamResponse", kind: "message", oneof: "data", T: () => GetAllExamResponse },
            { no: 39, name: "createQuestionRequest", kind: "message", oneof: "data", T: () => CreateQuestionRequest },
            { no: 40, name: "createQuestionResponse", kind: "message", oneof: "data", T: () => CreateQuestionResponse },
            { no: 41, name: "updateQuestionRequest", kind: "message", oneof: "data", T: () => UpdateQuestionRequest },
            { no: 42, name: "updateQuestionResponse", kind: "message", oneof: "data", T: () => UpdateQuestionResponse },
            { no: 43, name: "deleteQuestionRequest", kind: "message", oneof: "data", T: () => DeleteQuestionRequest },
            { no: 44, name: "deleteQuestionResponse", kind: "message", oneof: "data", T: () => DeleteQuestionResponse },
            { no: 45, name: "reqStartExam", kind: "message", oneof: "data", T: () => ReqStartExam },
            { no: 46, name: "resStartExam", kind: "message", oneof: "data", T: () => ResStartExam },
            { no: 47, name: "reqEndExam", kind: "message", oneof: "data", T: () => ReqEndExam },
            { no: 48, name: "resEndExam", kind: "message", oneof: "data", T: () => ResEndExam },
            { no: 49, name: "reqGetNextQuestion", kind: "message", oneof: "data", T: () => ReqGetNextQuestion },
            { no: 50, name: "reqCheckQuestionAnswer", kind: "message", oneof: "data", T: () => ReqCheckQuestionAnswer },
            { no: 51, name: "resCheckQuestionAnswer", kind: "message", oneof: "data", T: () => ResCheckQuestionAnswer },
            { no: 52, name: "userScore", kind: "message", oneof: "data", T: () => UserScore },
            { no: 53, name: "roomScore", kind: "message", oneof: "data", T: () => RoomScore },
            { no: 54, name: "exam", kind: "message", oneof: "data", T: () => Exam },
            { no: 55, name: "question", kind: "message", oneof: "data", T: () => Question },
            { no: 56, name: "choice", kind: "message", oneof: "data", T: () => Choice },
            { no: 57, name: "resGetNextQuestion", kind: "message", oneof: "data", T: () => ResGetNextQuestion },
            { no: 58, name: "reqGetRoomScore", kind: "message", oneof: "data", T: () => ReqGetRoomScore },
            { no: 59, name: "resGetRoomScore", kind: "message", oneof: "data", T: () => ResGetRoomScore },
            { no: 60, name: "report", kind: "message", oneof: "data", T: () => Report },
            { no: 61, name: "reqGetReport", kind: "message", oneof: "data", T: () => ReqGetReport },
            { no: 62, name: "resGetReport", kind: "message", oneof: "data", T: () => ResGetReport },
            { no: 63, name: "reqGetAllReportByHostId", kind: "message", oneof: "data", T: () => ReqGetAllReportByHostId },
            { no: 64, name: "reqGetAllReportByPlayerId", kind: "message", oneof: "data", T: () => ReqGetAllReportByPlayerId },
            { no: 65, name: "resGetAllReportByHostId", kind: "message", oneof: "data", T: () => ResGetAllReportByHostId },
            { no: 66, name: "resGetAllReportByPlayerId", kind: "message", oneof: "data", T: () => ResGetAllReportByPlayerId },
            { no: 67, name: "getQuestionRequest", kind: "message", oneof: "data", T: () => GetQuestionRequest },
            { no: 68, name: "getQuestionResponse", kind: "message", oneof: "data", T: () => GetQuestionResponse },
            { no: 69, name: "reqLockScreen", kind: "message", oneof: "data", T: () => ReqLockScreen },
            { no: 70, name: "resLockScreen", kind: "message", oneof: "data", T: () => ResLockScreen },
            { no: 71, name: "reqUnlockScreen", kind: "message", oneof: "data", T: () => ReqUnlockScreen },
            { no: 72, name: "resUnlockScreen", kind: "message", oneof: "data", T: () => ResUnlockScreen }
        ]);
    }
    create(value?: PartialMessage<Packet>): Packet {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<Packet>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Packet): Packet {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* proto.ReqLogin reqLogin */ 1:
                    message.data = {
                        oneofKind: "reqLogin",
                        reqLogin: ReqLogin.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).reqLogin)
                    };
                    break;
                case /* proto.ReqRelogin reqRelogin */ 2:
                    message.data = {
                        oneofKind: "reqRelogin",
                        reqRelogin: ReqRelogin.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).reqRelogin)
                    };
                    break;
                case /* proto.ResLogin resLogin */ 3:
                    message.data = {
                        oneofKind: "resLogin",
                        resLogin: ResLogin.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).resLogin)
                    };
                    break;
                case /* proto.ResUserAlert resUserAlert */ 4:
                    message.data = {
                        oneofKind: "resUserAlert",
                        resUserAlert: ResUserAlert.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).resUserAlert)
                    };
                    break;
                case /* proto.ReqLogout reqLogout */ 5:
                    message.data = {
                        oneofKind: "reqLogout",
                        reqLogout: ReqLogout.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).reqLogout)
                    };
                    break;
                case /* proto.ResLogout resLogout */ 6:
                    message.data = {
                        oneofKind: "resLogout",
                        resLogout: ResLogout.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).resLogout)
                    };
                    break;
                case /* proto.ReqForgotPassword reqForgotPassword */ 7:
                    message.data = {
                        oneofKind: "reqForgotPassword",
                        reqForgotPassword: ReqForgotPassword.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).reqForgotPassword)
                    };
                    break;
                case /* proto.ReqVerifyForgotPassword reqVerifyForgotPassword */ 8:
                    message.data = {
                        oneofKind: "reqVerifyForgotPassword",
                        reqVerifyForgotPassword: ReqVerifyForgotPassword.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).reqVerifyForgotPassword)
                    };
                    break;
                case /* proto.ResVerifyForgotPassword resVerifyForgotPassword */ 9:
                    message.data = {
                        oneofKind: "resVerifyForgotPassword",
                        resVerifyForgotPassword: ResVerifyForgotPassword.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).resVerifyForgotPassword)
                    };
                    break;
                case /* proto.ReqChangePasswordForgot reqChangePasswordForgot */ 10:
                    message.data = {
                        oneofKind: "reqChangePasswordForgot",
                        reqChangePasswordForgot: ReqChangePasswordForgot.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).reqChangePasswordForgot)
                    };
                    break;
                case /* proto.ResChangePasswordForgot resChangePasswordForgot */ 11:
                    message.data = {
                        oneofKind: "resChangePasswordForgot",
                        resChangePasswordForgot: ResChangePasswordForgot.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).resChangePasswordForgot)
                    };
                    break;
                case /* proto.ResForgotPassword resForgotPassword */ 12:
                    message.data = {
                        oneofKind: "resForgotPassword",
                        resForgotPassword: ResForgotPassword.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).resForgotPassword)
                    };
                    break;
                case /* proto.ReqRegister reqRegister */ 13:
                    message.data = {
                        oneofKind: "reqRegister",
                        reqRegister: ReqRegister.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).reqRegister)
                    };
                    break;
                case /* proto.ResRegister resRegister */ 14:
                    message.data = {
                        oneofKind: "resRegister",
                        resRegister: ResRegister.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).resRegister)
                    };
                    break;
                case /* proto.ReqUpdateUserInfo reqUpdateUserInfo */ 15:
                    message.data = {
                        oneofKind: "reqUpdateUserInfo",
                        reqUpdateUserInfo: ReqUpdateUserInfo.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).reqUpdateUserInfo)
                    };
                    break;
                case /* proto.ResUserInfo resUserInfo */ 16:
                    message.data = {
                        oneofKind: "resUserInfo",
                        resUserInfo: ResUserInfo.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).resUserInfo)
                    };
                    break;
                case /* proto.ReqCreateRoom reqCreateRoom */ 17:
                    message.data = {
                        oneofKind: "reqCreateRoom",
                        reqCreateRoom: ReqCreateRoom.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).reqCreateRoom)
                    };
                    break;
                case /* proto.ResCreateRoom resCreateRoom */ 18:
                    message.data = {
                        oneofKind: "resCreateRoom",
                        resCreateRoom: ResCreateRoom.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).resCreateRoom)
                    };
                    break;
                case /* proto.ReqJoinRoom reqJoinRoom */ 19:
                    message.data = {
                        oneofKind: "reqJoinRoom",
                        reqJoinRoom: ReqJoinRoom.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).reqJoinRoom)
                    };
                    break;
                case /* proto.ResJoinRoom resJoinRoom */ 20:
                    message.data = {
                        oneofKind: "resJoinRoom",
                        resJoinRoom: ResJoinRoom.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).resJoinRoom)
                    };
                    break;
                case /* proto.ReqOutRoom reqOutRoom */ 21:
                    message.data = {
                        oneofKind: "reqOutRoom",
                        reqOutRoom: ReqOutRoom.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).reqOutRoom)
                    };
                    break;
                case /* proto.ResOutRoom resOutRoom */ 22:
                    message.data = {
                        oneofKind: "resOutRoom",
                        resOutRoom: ResOutRoom.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).resOutRoom)
                    };
                    break;
                case /* proto.ReqCloseRoom reqCloseRoom */ 23:
                    message.data = {
                        oneofKind: "reqCloseRoom",
                        reqCloseRoom: ReqCloseRoom.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).reqCloseRoom)
                    };
                    break;
                case /* proto.ResCloseRoom resCloseRoom */ 24:
                    message.data = {
                        oneofKind: "resCloseRoom",
                        resCloseRoom: ResCloseRoom.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).resCloseRoom)
                    };
                    break;
                case /* proto.ReqVerify reqVerify */ 25:
                    message.data = {
                        oneofKind: "reqVerify",
                        reqVerify: ReqVerify.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).reqVerify)
                    };
                    break;
                case /* proto.ResVerify resVerify */ 26:
                    message.data = {
                        oneofKind: "resVerify",
                        resVerify: ResVerify.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).resVerify)
                    };
                    break;
                case /* proto.ReqChangePassword reqChangePassword */ 27:
                    message.data = {
                        oneofKind: "reqChangePassword",
                        reqChangePassword: ReqChangePassword.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).reqChangePassword)
                    };
                    break;
                case /* proto.ResChangePassword resChangePassword */ 28:
                    message.data = {
                        oneofKind: "resChangePassword",
                        resChangePassword: ResChangePassword.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).resChangePassword)
                    };
                    break;
                case /* proto.CreateExamRequest createExamRequest */ 29:
                    message.data = {
                        oneofKind: "createExamRequest",
                        createExamRequest: CreateExamRequest.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).createExamRequest)
                    };
                    break;
                case /* proto.CreateExamResponse createExamResponse */ 30:
                    message.data = {
                        oneofKind: "createExamResponse",
                        createExamResponse: CreateExamResponse.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).createExamResponse)
                    };
                    break;
                case /* proto.UpdateExamRequest updateExamRequest */ 31:
                    message.data = {
                        oneofKind: "updateExamRequest",
                        updateExamRequest: UpdateExamRequest.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).updateExamRequest)
                    };
                    break;
                case /* proto.UpdateExamResponse updateExamResponse */ 32:
                    message.data = {
                        oneofKind: "updateExamResponse",
                        updateExamResponse: UpdateExamResponse.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).updateExamResponse)
                    };
                    break;
                case /* proto.DeleteExamRequest deleteExamRequest */ 33:
                    message.data = {
                        oneofKind: "deleteExamRequest",
                        deleteExamRequest: DeleteExamRequest.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).deleteExamRequest)
                    };
                    break;
                case /* proto.DeleteExamResponse deleteExamResponse */ 34:
                    message.data = {
                        oneofKind: "deleteExamResponse",
                        deleteExamResponse: DeleteExamResponse.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).deleteExamResponse)
                    };
                    break;
                case /* proto.GetExamRequest getExamRequest */ 35:
                    message.data = {
                        oneofKind: "getExamRequest",
                        getExamRequest: GetExamRequest.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).getExamRequest)
                    };
                    break;
                case /* proto.GetExamResponse getExamResponse */ 36:
                    message.data = {
                        oneofKind: "getExamResponse",
                        getExamResponse: GetExamResponse.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).getExamResponse)
                    };
                    break;
                case /* proto.GetAllExamRequest getAllExamRequest */ 37:
                    message.data = {
                        oneofKind: "getAllExamRequest",
                        getAllExamRequest: GetAllExamRequest.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).getAllExamRequest)
                    };
                    break;
                case /* proto.GetAllExamResponse getAllExamResponse */ 38:
                    message.data = {
                        oneofKind: "getAllExamResponse",
                        getAllExamResponse: GetAllExamResponse.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).getAllExamResponse)
                    };
                    break;
                case /* proto.CreateQuestionRequest createQuestionRequest */ 39:
                    message.data = {
                        oneofKind: "createQuestionRequest",
                        createQuestionRequest: CreateQuestionRequest.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).createQuestionRequest)
                    };
                    break;
                case /* proto.CreateQuestionResponse createQuestionResponse */ 40:
                    message.data = {
                        oneofKind: "createQuestionResponse",
                        createQuestionResponse: CreateQuestionResponse.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).createQuestionResponse)
                    };
                    break;
                case /* proto.UpdateQuestionRequest updateQuestionRequest */ 41:
                    message.data = {
                        oneofKind: "updateQuestionRequest",
                        updateQuestionRequest: UpdateQuestionRequest.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).updateQuestionRequest)
                    };
                    break;
                case /* proto.UpdateQuestionResponse updateQuestionResponse */ 42:
                    message.data = {
                        oneofKind: "updateQuestionResponse",
                        updateQuestionResponse: UpdateQuestionResponse.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).updateQuestionResponse)
                    };
                    break;
                case /* proto.DeleteQuestionRequest deleteQuestionRequest */ 43:
                    message.data = {
                        oneofKind: "deleteQuestionRequest",
                        deleteQuestionRequest: DeleteQuestionRequest.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).deleteQuestionRequest)
                    };
                    break;
                case /* proto.DeleteQuestionResponse deleteQuestionResponse */ 44:
                    message.data = {
                        oneofKind: "deleteQuestionResponse",
                        deleteQuestionResponse: DeleteQuestionResponse.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).deleteQuestionResponse)
                    };
                    break;
                case /* proto.ReqStartExam reqStartExam */ 45:
                    message.data = {
                        oneofKind: "reqStartExam",
                        reqStartExam: ReqStartExam.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).reqStartExam)
                    };
                    break;
                case /* proto.ResStartExam resStartExam */ 46:
                    message.data = {
                        oneofKind: "resStartExam",
                        resStartExam: ResStartExam.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).resStartExam)
                    };
                    break;
                case /* proto.ReqEndExam reqEndExam */ 47:
                    message.data = {
                        oneofKind: "reqEndExam",
                        reqEndExam: ReqEndExam.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).reqEndExam)
                    };
                    break;
                case /* proto.ResEndExam resEndExam */ 48:
                    message.data = {
                        oneofKind: "resEndExam",
                        resEndExam: ResEndExam.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).resEndExam)
                    };
                    break;
                case /* proto.ReqGetNextQuestion reqGetNextQuestion */ 49:
                    message.data = {
                        oneofKind: "reqGetNextQuestion",
                        reqGetNextQuestion: ReqGetNextQuestion.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).reqGetNextQuestion)
                    };
                    break;
                case /* proto.ReqCheckQuestionAnswer reqCheckQuestionAnswer */ 50:
                    message.data = {
                        oneofKind: "reqCheckQuestionAnswer",
                        reqCheckQuestionAnswer: ReqCheckQuestionAnswer.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).reqCheckQuestionAnswer)
                    };
                    break;
                case /* proto.ResCheckQuestionAnswer resCheckQuestionAnswer */ 51:
                    message.data = {
                        oneofKind: "resCheckQuestionAnswer",
                        resCheckQuestionAnswer: ResCheckQuestionAnswer.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).resCheckQuestionAnswer)
                    };
                    break;
                case /* proto.UserScore userScore */ 52:
                    message.data = {
                        oneofKind: "userScore",
                        userScore: UserScore.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).userScore)
                    };
                    break;
                case /* proto.RoomScore roomScore */ 53:
                    message.data = {
                        oneofKind: "roomScore",
                        roomScore: RoomScore.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).roomScore)
                    };
                    break;
                case /* proto.Exam exam */ 54:
                    message.data = {
                        oneofKind: "exam",
                        exam: Exam.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).exam)
                    };
                    break;
                case /* proto.Question question */ 55:
                    message.data = {
                        oneofKind: "question",
                        question: Question.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).question)
                    };
                    break;
                case /* proto.Choice choice */ 56:
                    message.data = {
                        oneofKind: "choice",
                        choice: Choice.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).choice)
                    };
                    break;
                case /* proto.ResGetNextQuestion resGetNextQuestion */ 57:
                    message.data = {
                        oneofKind: "resGetNextQuestion",
                        resGetNextQuestion: ResGetNextQuestion.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).resGetNextQuestion)
                    };
                    break;
                case /* proto.ReqGetRoomScore reqGetRoomScore */ 58:
                    message.data = {
                        oneofKind: "reqGetRoomScore",
                        reqGetRoomScore: ReqGetRoomScore.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).reqGetRoomScore)
                    };
                    break;
                case /* proto.ResGetRoomScore resGetRoomScore */ 59:
                    message.data = {
                        oneofKind: "resGetRoomScore",
                        resGetRoomScore: ResGetRoomScore.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).resGetRoomScore)
                    };
                    break;
                case /* proto.Report report */ 60:
                    message.data = {
                        oneofKind: "report",
                        report: Report.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).report)
                    };
                    break;
                case /* proto.ReqGetReport reqGetReport */ 61:
                    message.data = {
                        oneofKind: "reqGetReport",
                        reqGetReport: ReqGetReport.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).reqGetReport)
                    };
                    break;
                case /* proto.ResGetReport resGetReport */ 62:
                    message.data = {
                        oneofKind: "resGetReport",
                        resGetReport: ResGetReport.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).resGetReport)
                    };
                    break;
                case /* proto.ReqGetAllReportByHostId reqGetAllReportByHostId */ 63:
                    message.data = {
                        oneofKind: "reqGetAllReportByHostId",
                        reqGetAllReportByHostId: ReqGetAllReportByHostId.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).reqGetAllReportByHostId)
                    };
                    break;
                case /* proto.ReqGetAllReportByPlayerId reqGetAllReportByPlayerId */ 64:
                    message.data = {
                        oneofKind: "reqGetAllReportByPlayerId",
                        reqGetAllReportByPlayerId: ReqGetAllReportByPlayerId.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).reqGetAllReportByPlayerId)
                    };
                    break;
                case /* proto.ResGetAllReportByHostId resGetAllReportByHostId */ 65:
                    message.data = {
                        oneofKind: "resGetAllReportByHostId",
                        resGetAllReportByHostId: ResGetAllReportByHostId.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).resGetAllReportByHostId)
                    };
                    break;
                case /* proto.ResGetAllReportByPlayerId resGetAllReportByPlayerId */ 66:
                    message.data = {
                        oneofKind: "resGetAllReportByPlayerId",
                        resGetAllReportByPlayerId: ResGetAllReportByPlayerId.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).resGetAllReportByPlayerId)
                    };
                    break;
                case /* proto.GetQuestionRequest getQuestionRequest */ 67:
                    message.data = {
                        oneofKind: "getQuestionRequest",
                        getQuestionRequest: GetQuestionRequest.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).getQuestionRequest)
                    };
                    break;
                case /* proto.GetQuestionResponse getQuestionResponse */ 68:
                    message.data = {
                        oneofKind: "getQuestionResponse",
                        getQuestionResponse: GetQuestionResponse.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).getQuestionResponse)
                    };
                    break;
                case /* proto.ReqLockScreen reqLockScreen */ 69:
                    message.data = {
                        oneofKind: "reqLockScreen",
                        reqLockScreen: ReqLockScreen.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).reqLockScreen)
                    };
                    break;
                case /* proto.ResLockScreen resLockScreen */ 70:
                    message.data = {
                        oneofKind: "resLockScreen",
                        resLockScreen: ResLockScreen.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).resLockScreen)
                    };
                    break;
                case /* proto.ReqUnlockScreen reqUnlockScreen */ 71:
                    message.data = {
                        oneofKind: "reqUnlockScreen",
                        reqUnlockScreen: ReqUnlockScreen.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).reqUnlockScreen)
                    };
                    break;
                case /* proto.ResUnlockScreen resUnlockScreen */ 72:
                    message.data = {
                        oneofKind: "resUnlockScreen",
                        resUnlockScreen: ResUnlockScreen.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).resUnlockScreen)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Packet, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* proto.ReqLogin reqLogin = 1; */
        if (message.data.oneofKind === "reqLogin")
            ReqLogin.internalBinaryWrite(message.data.reqLogin, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* proto.ReqRelogin reqRelogin = 2; */
        if (message.data.oneofKind === "reqRelogin")
            ReqRelogin.internalBinaryWrite(message.data.reqRelogin, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* proto.ResLogin resLogin = 3; */
        if (message.data.oneofKind === "resLogin")
            ResLogin.internalBinaryWrite(message.data.resLogin, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* proto.ResUserAlert resUserAlert = 4; */
        if (message.data.oneofKind === "resUserAlert")
            ResUserAlert.internalBinaryWrite(message.data.resUserAlert, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* proto.ReqLogout reqLogout = 5; */
        if (message.data.oneofKind === "reqLogout")
            ReqLogout.internalBinaryWrite(message.data.reqLogout, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* proto.ResLogout resLogout = 6; */
        if (message.data.oneofKind === "resLogout")
            ResLogout.internalBinaryWrite(message.data.resLogout, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* proto.ReqForgotPassword reqForgotPassword = 7; */
        if (message.data.oneofKind === "reqForgotPassword")
            ReqForgotPassword.internalBinaryWrite(message.data.reqForgotPassword, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* proto.ReqVerifyForgotPassword reqVerifyForgotPassword = 8; */
        if (message.data.oneofKind === "reqVerifyForgotPassword")
            ReqVerifyForgotPassword.internalBinaryWrite(message.data.reqVerifyForgotPassword, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* proto.ResVerifyForgotPassword resVerifyForgotPassword = 9; */
        if (message.data.oneofKind === "resVerifyForgotPassword")
            ResVerifyForgotPassword.internalBinaryWrite(message.data.resVerifyForgotPassword, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* proto.ReqChangePasswordForgot reqChangePasswordForgot = 10; */
        if (message.data.oneofKind === "reqChangePasswordForgot")
            ReqChangePasswordForgot.internalBinaryWrite(message.data.reqChangePasswordForgot, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* proto.ResChangePasswordForgot resChangePasswordForgot = 11; */
        if (message.data.oneofKind === "resChangePasswordForgot")
            ResChangePasswordForgot.internalBinaryWrite(message.data.resChangePasswordForgot, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* proto.ResForgotPassword resForgotPassword = 12; */
        if (message.data.oneofKind === "resForgotPassword")
            ResForgotPassword.internalBinaryWrite(message.data.resForgotPassword, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* proto.ReqRegister reqRegister = 13; */
        if (message.data.oneofKind === "reqRegister")
            ReqRegister.internalBinaryWrite(message.data.reqRegister, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* proto.ResRegister resRegister = 14; */
        if (message.data.oneofKind === "resRegister")
            ResRegister.internalBinaryWrite(message.data.resRegister, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* proto.ReqUpdateUserInfo reqUpdateUserInfo = 15; */
        if (message.data.oneofKind === "reqUpdateUserInfo")
            ReqUpdateUserInfo.internalBinaryWrite(message.data.reqUpdateUserInfo, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* proto.ResUserInfo resUserInfo = 16; */
        if (message.data.oneofKind === "resUserInfo")
            ResUserInfo.internalBinaryWrite(message.data.resUserInfo, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* proto.ReqCreateRoom reqCreateRoom = 17; */
        if (message.data.oneofKind === "reqCreateRoom")
            ReqCreateRoom.internalBinaryWrite(message.data.reqCreateRoom, writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        /* proto.ResCreateRoom resCreateRoom = 18; */
        if (message.data.oneofKind === "resCreateRoom")
            ResCreateRoom.internalBinaryWrite(message.data.resCreateRoom, writer.tag(18, WireType.LengthDelimited).fork(), options).join();
        /* proto.ReqJoinRoom reqJoinRoom = 19; */
        if (message.data.oneofKind === "reqJoinRoom")
            ReqJoinRoom.internalBinaryWrite(message.data.reqJoinRoom, writer.tag(19, WireType.LengthDelimited).fork(), options).join();
        /* proto.ResJoinRoom resJoinRoom = 20; */
        if (message.data.oneofKind === "resJoinRoom")
            ResJoinRoom.internalBinaryWrite(message.data.resJoinRoom, writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        /* proto.ReqOutRoom reqOutRoom = 21; */
        if (message.data.oneofKind === "reqOutRoom")
            ReqOutRoom.internalBinaryWrite(message.data.reqOutRoom, writer.tag(21, WireType.LengthDelimited).fork(), options).join();
        /* proto.ResOutRoom resOutRoom = 22; */
        if (message.data.oneofKind === "resOutRoom")
            ResOutRoom.internalBinaryWrite(message.data.resOutRoom, writer.tag(22, WireType.LengthDelimited).fork(), options).join();
        /* proto.ReqCloseRoom reqCloseRoom = 23; */
        if (message.data.oneofKind === "reqCloseRoom")
            ReqCloseRoom.internalBinaryWrite(message.data.reqCloseRoom, writer.tag(23, WireType.LengthDelimited).fork(), options).join();
        /* proto.ResCloseRoom resCloseRoom = 24; */
        if (message.data.oneofKind === "resCloseRoom")
            ResCloseRoom.internalBinaryWrite(message.data.resCloseRoom, writer.tag(24, WireType.LengthDelimited).fork(), options).join();
        /* proto.ReqVerify reqVerify = 25; */
        if (message.data.oneofKind === "reqVerify")
            ReqVerify.internalBinaryWrite(message.data.reqVerify, writer.tag(25, WireType.LengthDelimited).fork(), options).join();
        /* proto.ResVerify resVerify = 26; */
        if (message.data.oneofKind === "resVerify")
            ResVerify.internalBinaryWrite(message.data.resVerify, writer.tag(26, WireType.LengthDelimited).fork(), options).join();
        /* proto.ReqChangePassword reqChangePassword = 27; */
        if (message.data.oneofKind === "reqChangePassword")
            ReqChangePassword.internalBinaryWrite(message.data.reqChangePassword, writer.tag(27, WireType.LengthDelimited).fork(), options).join();
        /* proto.ResChangePassword resChangePassword = 28; */
        if (message.data.oneofKind === "resChangePassword")
            ResChangePassword.internalBinaryWrite(message.data.resChangePassword, writer.tag(28, WireType.LengthDelimited).fork(), options).join();
        /* proto.CreateExamRequest createExamRequest = 29; */
        if (message.data.oneofKind === "createExamRequest")
            CreateExamRequest.internalBinaryWrite(message.data.createExamRequest, writer.tag(29, WireType.LengthDelimited).fork(), options).join();
        /* proto.CreateExamResponse createExamResponse = 30; */
        if (message.data.oneofKind === "createExamResponse")
            CreateExamResponse.internalBinaryWrite(message.data.createExamResponse, writer.tag(30, WireType.LengthDelimited).fork(), options).join();
        /* proto.UpdateExamRequest updateExamRequest = 31; */
        if (message.data.oneofKind === "updateExamRequest")
            UpdateExamRequest.internalBinaryWrite(message.data.updateExamRequest, writer.tag(31, WireType.LengthDelimited).fork(), options).join();
        /* proto.UpdateExamResponse updateExamResponse = 32; */
        if (message.data.oneofKind === "updateExamResponse")
            UpdateExamResponse.internalBinaryWrite(message.data.updateExamResponse, writer.tag(32, WireType.LengthDelimited).fork(), options).join();
        /* proto.DeleteExamRequest deleteExamRequest = 33; */
        if (message.data.oneofKind === "deleteExamRequest")
            DeleteExamRequest.internalBinaryWrite(message.data.deleteExamRequest, writer.tag(33, WireType.LengthDelimited).fork(), options).join();
        /* proto.DeleteExamResponse deleteExamResponse = 34; */
        if (message.data.oneofKind === "deleteExamResponse")
            DeleteExamResponse.internalBinaryWrite(message.data.deleteExamResponse, writer.tag(34, WireType.LengthDelimited).fork(), options).join();
        /* proto.GetExamRequest getExamRequest = 35; */
        if (message.data.oneofKind === "getExamRequest")
            GetExamRequest.internalBinaryWrite(message.data.getExamRequest, writer.tag(35, WireType.LengthDelimited).fork(), options).join();
        /* proto.GetExamResponse getExamResponse = 36; */
        if (message.data.oneofKind === "getExamResponse")
            GetExamResponse.internalBinaryWrite(message.data.getExamResponse, writer.tag(36, WireType.LengthDelimited).fork(), options).join();
        /* proto.GetAllExamRequest getAllExamRequest = 37; */
        if (message.data.oneofKind === "getAllExamRequest")
            GetAllExamRequest.internalBinaryWrite(message.data.getAllExamRequest, writer.tag(37, WireType.LengthDelimited).fork(), options).join();
        /* proto.GetAllExamResponse getAllExamResponse = 38; */
        if (message.data.oneofKind === "getAllExamResponse")
            GetAllExamResponse.internalBinaryWrite(message.data.getAllExamResponse, writer.tag(38, WireType.LengthDelimited).fork(), options).join();
        /* proto.CreateQuestionRequest createQuestionRequest = 39; */
        if (message.data.oneofKind === "createQuestionRequest")
            CreateQuestionRequest.internalBinaryWrite(message.data.createQuestionRequest, writer.tag(39, WireType.LengthDelimited).fork(), options).join();
        /* proto.CreateQuestionResponse createQuestionResponse = 40; */
        if (message.data.oneofKind === "createQuestionResponse")
            CreateQuestionResponse.internalBinaryWrite(message.data.createQuestionResponse, writer.tag(40, WireType.LengthDelimited).fork(), options).join();
        /* proto.UpdateQuestionRequest updateQuestionRequest = 41; */
        if (message.data.oneofKind === "updateQuestionRequest")
            UpdateQuestionRequest.internalBinaryWrite(message.data.updateQuestionRequest, writer.tag(41, WireType.LengthDelimited).fork(), options).join();
        /* proto.UpdateQuestionResponse updateQuestionResponse = 42; */
        if (message.data.oneofKind === "updateQuestionResponse")
            UpdateQuestionResponse.internalBinaryWrite(message.data.updateQuestionResponse, writer.tag(42, WireType.LengthDelimited).fork(), options).join();
        /* proto.DeleteQuestionRequest deleteQuestionRequest = 43; */
        if (message.data.oneofKind === "deleteQuestionRequest")
            DeleteQuestionRequest.internalBinaryWrite(message.data.deleteQuestionRequest, writer.tag(43, WireType.LengthDelimited).fork(), options).join();
        /* proto.DeleteQuestionResponse deleteQuestionResponse = 44; */
        if (message.data.oneofKind === "deleteQuestionResponse")
            DeleteQuestionResponse.internalBinaryWrite(message.data.deleteQuestionResponse, writer.tag(44, WireType.LengthDelimited).fork(), options).join();
        /* proto.ReqStartExam reqStartExam = 45; */
        if (message.data.oneofKind === "reqStartExam")
            ReqStartExam.internalBinaryWrite(message.data.reqStartExam, writer.tag(45, WireType.LengthDelimited).fork(), options).join();
        /* proto.ResStartExam resStartExam = 46; */
        if (message.data.oneofKind === "resStartExam")
            ResStartExam.internalBinaryWrite(message.data.resStartExam, writer.tag(46, WireType.LengthDelimited).fork(), options).join();
        /* proto.ReqEndExam reqEndExam = 47; */
        if (message.data.oneofKind === "reqEndExam")
            ReqEndExam.internalBinaryWrite(message.data.reqEndExam, writer.tag(47, WireType.LengthDelimited).fork(), options).join();
        /* proto.ResEndExam resEndExam = 48; */
        if (message.data.oneofKind === "resEndExam")
            ResEndExam.internalBinaryWrite(message.data.resEndExam, writer.tag(48, WireType.LengthDelimited).fork(), options).join();
        /* proto.ReqGetNextQuestion reqGetNextQuestion = 49; */
        if (message.data.oneofKind === "reqGetNextQuestion")
            ReqGetNextQuestion.internalBinaryWrite(message.data.reqGetNextQuestion, writer.tag(49, WireType.LengthDelimited).fork(), options).join();
        /* proto.ReqCheckQuestionAnswer reqCheckQuestionAnswer = 50; */
        if (message.data.oneofKind === "reqCheckQuestionAnswer")
            ReqCheckQuestionAnswer.internalBinaryWrite(message.data.reqCheckQuestionAnswer, writer.tag(50, WireType.LengthDelimited).fork(), options).join();
        /* proto.ResCheckQuestionAnswer resCheckQuestionAnswer = 51; */
        if (message.data.oneofKind === "resCheckQuestionAnswer")
            ResCheckQuestionAnswer.internalBinaryWrite(message.data.resCheckQuestionAnswer, writer.tag(51, WireType.LengthDelimited).fork(), options).join();
        /* proto.UserScore userScore = 52; */
        if (message.data.oneofKind === "userScore")
            UserScore.internalBinaryWrite(message.data.userScore, writer.tag(52, WireType.LengthDelimited).fork(), options).join();
        /* proto.RoomScore roomScore = 53; */
        if (message.data.oneofKind === "roomScore")
            RoomScore.internalBinaryWrite(message.data.roomScore, writer.tag(53, WireType.LengthDelimited).fork(), options).join();
        /* proto.Exam exam = 54; */
        if (message.data.oneofKind === "exam")
            Exam.internalBinaryWrite(message.data.exam, writer.tag(54, WireType.LengthDelimited).fork(), options).join();
        /* proto.Question question = 55; */
        if (message.data.oneofKind === "question")
            Question.internalBinaryWrite(message.data.question, writer.tag(55, WireType.LengthDelimited).fork(), options).join();
        /* proto.Choice choice = 56; */
        if (message.data.oneofKind === "choice")
            Choice.internalBinaryWrite(message.data.choice, writer.tag(56, WireType.LengthDelimited).fork(), options).join();
        /* proto.ResGetNextQuestion resGetNextQuestion = 57; */
        if (message.data.oneofKind === "resGetNextQuestion")
            ResGetNextQuestion.internalBinaryWrite(message.data.resGetNextQuestion, writer.tag(57, WireType.LengthDelimited).fork(), options).join();
        /* proto.ReqGetRoomScore reqGetRoomScore = 58; */
        if (message.data.oneofKind === "reqGetRoomScore")
            ReqGetRoomScore.internalBinaryWrite(message.data.reqGetRoomScore, writer.tag(58, WireType.LengthDelimited).fork(), options).join();
        /* proto.ResGetRoomScore resGetRoomScore = 59; */
        if (message.data.oneofKind === "resGetRoomScore")
            ResGetRoomScore.internalBinaryWrite(message.data.resGetRoomScore, writer.tag(59, WireType.LengthDelimited).fork(), options).join();
        /* proto.Report report = 60; */
        if (message.data.oneofKind === "report")
            Report.internalBinaryWrite(message.data.report, writer.tag(60, WireType.LengthDelimited).fork(), options).join();
        /* proto.ReqGetReport reqGetReport = 61; */
        if (message.data.oneofKind === "reqGetReport")
            ReqGetReport.internalBinaryWrite(message.data.reqGetReport, writer.tag(61, WireType.LengthDelimited).fork(), options).join();
        /* proto.ResGetReport resGetReport = 62; */
        if (message.data.oneofKind === "resGetReport")
            ResGetReport.internalBinaryWrite(message.data.resGetReport, writer.tag(62, WireType.LengthDelimited).fork(), options).join();
        /* proto.ReqGetAllReportByHostId reqGetAllReportByHostId = 63; */
        if (message.data.oneofKind === "reqGetAllReportByHostId")
            ReqGetAllReportByHostId.internalBinaryWrite(message.data.reqGetAllReportByHostId, writer.tag(63, WireType.LengthDelimited).fork(), options).join();
        /* proto.ReqGetAllReportByPlayerId reqGetAllReportByPlayerId = 64; */
        if (message.data.oneofKind === "reqGetAllReportByPlayerId")
            ReqGetAllReportByPlayerId.internalBinaryWrite(message.data.reqGetAllReportByPlayerId, writer.tag(64, WireType.LengthDelimited).fork(), options).join();
        /* proto.ResGetAllReportByHostId resGetAllReportByHostId = 65; */
        if (message.data.oneofKind === "resGetAllReportByHostId")
            ResGetAllReportByHostId.internalBinaryWrite(message.data.resGetAllReportByHostId, writer.tag(65, WireType.LengthDelimited).fork(), options).join();
        /* proto.ResGetAllReportByPlayerId resGetAllReportByPlayerId = 66; */
        if (message.data.oneofKind === "resGetAllReportByPlayerId")
            ResGetAllReportByPlayerId.internalBinaryWrite(message.data.resGetAllReportByPlayerId, writer.tag(66, WireType.LengthDelimited).fork(), options).join();
        /* proto.GetQuestionRequest getQuestionRequest = 67; */
        if (message.data.oneofKind === "getQuestionRequest")
            GetQuestionRequest.internalBinaryWrite(message.data.getQuestionRequest, writer.tag(67, WireType.LengthDelimited).fork(), options).join();
        /* proto.GetQuestionResponse getQuestionResponse = 68; */
        if (message.data.oneofKind === "getQuestionResponse")
            GetQuestionResponse.internalBinaryWrite(message.data.getQuestionResponse, writer.tag(68, WireType.LengthDelimited).fork(), options).join();
        /* proto.ReqLockScreen reqLockScreen = 69; */
        if (message.data.oneofKind === "reqLockScreen")
            ReqLockScreen.internalBinaryWrite(message.data.reqLockScreen, writer.tag(69, WireType.LengthDelimited).fork(), options).join();
        /* proto.ResLockScreen resLockScreen = 70; */
        if (message.data.oneofKind === "resLockScreen")
            ResLockScreen.internalBinaryWrite(message.data.resLockScreen, writer.tag(70, WireType.LengthDelimited).fork(), options).join();
        /* proto.ReqUnlockScreen reqUnlockScreen = 71; */
        if (message.data.oneofKind === "reqUnlockScreen")
            ReqUnlockScreen.internalBinaryWrite(message.data.reqUnlockScreen, writer.tag(71, WireType.LengthDelimited).fork(), options).join();
        /* proto.ResUnlockScreen resUnlockScreen = 72; */
        if (message.data.oneofKind === "resUnlockScreen")
            ResUnlockScreen.internalBinaryWrite(message.data.resUnlockScreen, writer.tag(72, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.Packet
 */
export const Packet = new Packet$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReqLogin$Type extends MessageType<ReqLogin> {
    constructor() {
        super("proto.ReqLogin", [
            { no: 1, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ReqLogin>): ReqLogin {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.username = "";
        message.password = "";
        if (value !== undefined)
            reflectionMergePartial<ReqLogin>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReqLogin): ReqLogin {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string username */ 1:
                    message.username = reader.string();
                    break;
                case /* string password */ 2:
                    message.password = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReqLogin, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string username = 1; */
        if (message.username !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.username);
        /* string password = 2; */
        if (message.password !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.password);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.ReqLogin
 */
export const ReqLogin = new ReqLogin$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReqRelogin$Type extends MessageType<ReqRelogin> {
    constructor() {
        super("proto.ReqRelogin", [
            { no: 1, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ReqRelogin>): ReqRelogin {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.username = "";
        message.token = "";
        if (value !== undefined)
            reflectionMergePartial<ReqRelogin>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReqRelogin): ReqRelogin {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string username */ 1:
                    message.username = reader.string();
                    break;
                case /* string token */ 2:
                    message.token = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReqRelogin, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string username = 1; */
        if (message.username !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.username);
        /* string token = 2; */
        if (message.token !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.token);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.ReqRelogin
 */
export const ReqRelogin = new ReqRelogin$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResLogin$Type extends MessageType<ResLogin> {
    constructor() {
        super("proto.ResLogin", [
            { no: 1, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "user", kind: "message", T: () => User }
        ]);
    }
    create(value?: PartialMessage<ResLogin>): ResLogin {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = 0;
        message.token = "";
        if (value !== undefined)
            reflectionMergePartial<ResLogin>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResLogin): ResLogin {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 status */ 1:
                    message.status = reader.int32();
                    break;
                case /* string token */ 2:
                    message.token = reader.string();
                    break;
                case /* proto.User user */ 3:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResLogin, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 status = 1; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).int32(message.status);
        /* string token = 2; */
        if (message.token !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.token);
        /* proto.User user = 3; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.ResLogin
 */
export const ResLogin = new ResLogin$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResUserAlert$Type extends MessageType<ResUserAlert> {
    constructor() {
        super("proto.ResUserAlert", [
            { no: 1, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ResUserAlert>): ResUserAlert {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<ResUserAlert>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResUserAlert): ResUserAlert {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 status */ 1:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResUserAlert, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 status = 1; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.ResUserAlert
 */
export const ResUserAlert = new ResUserAlert$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReqLogout$Type extends MessageType<ReqLogout> {
    constructor() {
        super("proto.ReqLogout", []);
    }
    create(value?: PartialMessage<ReqLogout>): ReqLogout {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ReqLogout>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReqLogout): ReqLogout {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ReqLogout, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.ReqLogout
 */
export const ReqLogout = new ReqLogout$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResLogout$Type extends MessageType<ResLogout> {
    constructor() {
        super("proto.ResLogout", [
            { no: 1, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ResLogout>): ResLogout {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<ResLogout>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResLogout): ResLogout {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 status */ 1:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResLogout, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 status = 1; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.ResLogout
 */
export const ResLogout = new ResLogout$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReqForgotPassword$Type extends MessageType<ReqForgotPassword> {
    constructor() {
        super("proto.ReqForgotPassword", [
            { no: 1, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ReqForgotPassword>): ReqForgotPassword {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.email = "";
        if (value !== undefined)
            reflectionMergePartial<ReqForgotPassword>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReqForgotPassword): ReqForgotPassword {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string email */ 1:
                    message.email = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReqForgotPassword, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string email = 1; */
        if (message.email !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.email);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.ReqForgotPassword
 */
export const ReqForgotPassword = new ReqForgotPassword$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReqVerifyForgotPassword$Type extends MessageType<ReqVerifyForgotPassword> {
    constructor() {
        super("proto.ReqVerifyForgotPassword", [
            { no: 1, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "otp", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ReqVerifyForgotPassword>): ReqVerifyForgotPassword {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.email = "";
        message.otp = "";
        if (value !== undefined)
            reflectionMergePartial<ReqVerifyForgotPassword>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReqVerifyForgotPassword): ReqVerifyForgotPassword {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string email */ 1:
                    message.email = reader.string();
                    break;
                case /* string otp */ 2:
                    message.otp = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReqVerifyForgotPassword, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string email = 1; */
        if (message.email !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.email);
        /* string otp = 2; */
        if (message.otp !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.otp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.ReqVerifyForgotPassword
 */
export const ReqVerifyForgotPassword = new ReqVerifyForgotPassword$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResVerifyForgotPassword$Type extends MessageType<ResVerifyForgotPassword> {
    constructor() {
        super("proto.ResVerifyForgotPassword", [
            { no: 1, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ResVerifyForgotPassword>): ResVerifyForgotPassword {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<ResVerifyForgotPassword>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResVerifyForgotPassword): ResVerifyForgotPassword {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 status */ 1:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResVerifyForgotPassword, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 status = 1; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.ResVerifyForgotPassword
 */
export const ResVerifyForgotPassword = new ResVerifyForgotPassword$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReqChangePasswordForgot$Type extends MessageType<ReqChangePasswordForgot> {
    constructor() {
        super("proto.ReqChangePasswordForgot", [
            { no: 1, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "otp", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ReqChangePasswordForgot>): ReqChangePasswordForgot {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.password = "";
        message.otp = "";
        message.email = "";
        if (value !== undefined)
            reflectionMergePartial<ReqChangePasswordForgot>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReqChangePasswordForgot): ReqChangePasswordForgot {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string password */ 1:
                    message.password = reader.string();
                    break;
                case /* string otp */ 2:
                    message.otp = reader.string();
                    break;
                case /* string email */ 3:
                    message.email = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReqChangePasswordForgot, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string password = 1; */
        if (message.password !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.password);
        /* string otp = 2; */
        if (message.otp !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.otp);
        /* string email = 3; */
        if (message.email !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.email);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.ReqChangePasswordForgot
 */
export const ReqChangePasswordForgot = new ReqChangePasswordForgot$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResChangePasswordForgot$Type extends MessageType<ResChangePasswordForgot> {
    constructor() {
        super("proto.ResChangePasswordForgot", [
            { no: 1, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ResChangePasswordForgot>): ResChangePasswordForgot {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<ResChangePasswordForgot>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResChangePasswordForgot): ResChangePasswordForgot {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 status */ 1:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResChangePasswordForgot, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 status = 1; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.ResChangePasswordForgot
 */
export const ResChangePasswordForgot = new ResChangePasswordForgot$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResForgotPassword$Type extends MessageType<ResForgotPassword> {
    constructor() {
        super("proto.ResForgotPassword", [
            { no: 1, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ResForgotPassword>): ResForgotPassword {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<ResForgotPassword>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResForgotPassword): ResForgotPassword {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 status */ 1:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResForgotPassword, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 status = 1; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.ResForgotPassword
 */
export const ResForgotPassword = new ResForgotPassword$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReqRegister$Type extends MessageType<ReqRegister> {
    constructor() {
        super("proto.ReqRegister", [
            { no: 1, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "sponsor", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "phone", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ReqRegister>): ReqRegister {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.username = "";
        message.password = "";
        message.sponsor = "";
        message.phone = "";
        message.email = "";
        if (value !== undefined)
            reflectionMergePartial<ReqRegister>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReqRegister): ReqRegister {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string username */ 1:
                    message.username = reader.string();
                    break;
                case /* string password */ 2:
                    message.password = reader.string();
                    break;
                case /* string sponsor */ 3:
                    message.sponsor = reader.string();
                    break;
                case /* string phone */ 4:
                    message.phone = reader.string();
                    break;
                case /* string email */ 5:
                    message.email = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReqRegister, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string username = 1; */
        if (message.username !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.username);
        /* string password = 2; */
        if (message.password !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.password);
        /* string sponsor = 3; */
        if (message.sponsor !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.sponsor);
        /* string phone = 4; */
        if (message.phone !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.phone);
        /* string email = 5; */
        if (message.email !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.email);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.ReqRegister
 */
export const ReqRegister = new ReqRegister$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResRegister$Type extends MessageType<ResRegister> {
    constructor() {
        super("proto.ResRegister", [
            { no: 1, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ResRegister>): ResRegister {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<ResRegister>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResRegister): ResRegister {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 status */ 1:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResRegister, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 status = 1; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.ResRegister
 */
export const ResRegister = new ResRegister$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReqUpdateUserInfo$Type extends MessageType<ReqUpdateUserInfo> {
    constructor() {
        super("proto.ReqUpdateUserInfo", [
            { no: 1, name: "playerName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "gender", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ReqUpdateUserInfo>): ReqUpdateUserInfo {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.playerName = "";
        message.gender = 0;
        if (value !== undefined)
            reflectionMergePartial<ReqUpdateUserInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReqUpdateUserInfo): ReqUpdateUserInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string playerName */ 1:
                    message.playerName = reader.string();
                    break;
                case /* int32 gender */ 2:
                    message.gender = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReqUpdateUserInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string playerName = 1; */
        if (message.playerName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.playerName);
        /* int32 gender = 2; */
        if (message.gender !== 0)
            writer.tag(2, WireType.Varint).int32(message.gender);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.ReqUpdateUserInfo
 */
export const ReqUpdateUserInfo = new ReqUpdateUserInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResUserInfo$Type extends MessageType<ResUserInfo> {
    constructor() {
        super("proto.ResUserInfo", [
            { no: 1, name: "user", kind: "message", T: () => User }
        ]);
    }
    create(value?: PartialMessage<ResUserInfo>): ResUserInfo {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResUserInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResUserInfo): ResUserInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* proto.User user */ 1:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResUserInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* proto.User user = 1; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.ResUserInfo
 */
export const ResUserInfo = new ResUserInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class User$Type extends MessageType<User> {
    constructor() {
        super("proto.User", [
            { no: 1, name: "userId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "playerName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "gender", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "phone", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<User>): User {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = 0;
        message.username = "";
        message.playerName = "";
        message.gender = 0;
        message.email = "";
        message.phone = "";
        if (value !== undefined)
            reflectionMergePartial<User>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: User): User {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 userId */ 1:
                    message.userId = reader.int32();
                    break;
                case /* string username */ 2:
                    message.username = reader.string();
                    break;
                case /* string playerName */ 3:
                    message.playerName = reader.string();
                    break;
                case /* int32 gender */ 4:
                    message.gender = reader.int32();
                    break;
                case /* string email */ 6:
                    message.email = reader.string();
                    break;
                case /* string phone */ 7:
                    message.phone = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: User, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 userId = 1; */
        if (message.userId !== 0)
            writer.tag(1, WireType.Varint).int32(message.userId);
        /* string username = 2; */
        if (message.username !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.username);
        /* string playerName = 3; */
        if (message.playerName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.playerName);
        /* int32 gender = 4; */
        if (message.gender !== 0)
            writer.tag(4, WireType.Varint).int32(message.gender);
        /* string email = 6; */
        if (message.email !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.email);
        /* string phone = 7; */
        if (message.phone !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.phone);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.User
 */
export const User = new User$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReqCreateRoom$Type extends MessageType<ReqCreateRoom> {
    constructor() {
        super("proto.ReqCreateRoom", [
            { no: 1, name: "userId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "testId", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ReqCreateRoom>): ReqCreateRoom {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = 0;
        message.testId = 0;
        if (value !== undefined)
            reflectionMergePartial<ReqCreateRoom>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReqCreateRoom): ReqCreateRoom {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 userId */ 1:
                    message.userId = reader.int32();
                    break;
                case /* int32 testId */ 2:
                    message.testId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReqCreateRoom, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 userId = 1; */
        if (message.userId !== 0)
            writer.tag(1, WireType.Varint).int32(message.userId);
        /* int32 testId = 2; */
        if (message.testId !== 0)
            writer.tag(2, WireType.Varint).int32(message.testId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.ReqCreateRoom
 */
export const ReqCreateRoom = new ReqCreateRoom$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResCreateRoom$Type extends MessageType<ResCreateRoom> {
    constructor() {
        super("proto.ResCreateRoom", [
            { no: 1, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "roomId", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ResCreateRoom>): ResCreateRoom {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = 0;
        message.roomId = 0;
        if (value !== undefined)
            reflectionMergePartial<ResCreateRoom>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResCreateRoom): ResCreateRoom {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 status */ 1:
                    message.status = reader.int32();
                    break;
                case /* int32 roomId */ 2:
                    message.roomId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResCreateRoom, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 status = 1; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).int32(message.status);
        /* int32 roomId = 2; */
        if (message.roomId !== 0)
            writer.tag(2, WireType.Varint).int32(message.roomId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.ResCreateRoom
 */
export const ResCreateRoom = new ResCreateRoom$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReqJoinRoom$Type extends MessageType<ReqJoinRoom> {
    constructor() {
        super("proto.ReqJoinRoom", [
            { no: 1, name: "roomId", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ReqJoinRoom>): ReqJoinRoom {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.roomId = 0;
        if (value !== undefined)
            reflectionMergePartial<ReqJoinRoom>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReqJoinRoom): ReqJoinRoom {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 roomId */ 1:
                    message.roomId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReqJoinRoom, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 roomId = 1; */
        if (message.roomId !== 0)
            writer.tag(1, WireType.Varint).int32(message.roomId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.ReqJoinRoom
 */
export const ReqJoinRoom = new ReqJoinRoom$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResJoinRoom$Type extends MessageType<ResJoinRoom> {
    constructor() {
        super("proto.ResJoinRoom", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "sessionId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "hostId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "totalPlayer", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ResJoinRoom>): ResJoinRoom {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.sessionId = "";
        message.status = 0;
        message.hostId = "";
        message.totalPlayer = 0;
        if (value !== undefined)
            reflectionMergePartial<ResJoinRoom>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResJoinRoom): ResJoinRoom {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string sessionId */ 2:
                    message.sessionId = reader.string();
                    break;
                case /* int32 status */ 3:
                    message.status = reader.int32();
                    break;
                case /* string hostId */ 4:
                    message.hostId = reader.string();
                    break;
                case /* int32 totalPlayer */ 5:
                    message.totalPlayer = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResJoinRoom, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string sessionId = 2; */
        if (message.sessionId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sessionId);
        /* int32 status = 3; */
        if (message.status !== 0)
            writer.tag(3, WireType.Varint).int32(message.status);
        /* string hostId = 4; */
        if (message.hostId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.hostId);
        /* int32 totalPlayer = 5; */
        if (message.totalPlayer !== 0)
            writer.tag(5, WireType.Varint).int32(message.totalPlayer);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.ResJoinRoom
 */
export const ResJoinRoom = new ResJoinRoom$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReqOutRoom$Type extends MessageType<ReqOutRoom> {
    constructor() {
        super("proto.ReqOutRoom", [
            { no: 1, name: "roomId", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ReqOutRoom>): ReqOutRoom {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.roomId = 0;
        if (value !== undefined)
            reflectionMergePartial<ReqOutRoom>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReqOutRoom): ReqOutRoom {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 roomId */ 1:
                    message.roomId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReqOutRoom, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 roomId = 1; */
        if (message.roomId !== 0)
            writer.tag(1, WireType.Varint).int32(message.roomId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.ReqOutRoom
 */
export const ReqOutRoom = new ReqOutRoom$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResOutRoom$Type extends MessageType<ResOutRoom> {
    constructor() {
        super("proto.ResOutRoom", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "sessionId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ResOutRoom>): ResOutRoom {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.sessionId = "";
        if (value !== undefined)
            reflectionMergePartial<ResOutRoom>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResOutRoom): ResOutRoom {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string sessionId */ 2:
                    message.sessionId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResOutRoom, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string sessionId = 2; */
        if (message.sessionId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sessionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.ResOutRoom
 */
export const ResOutRoom = new ResOutRoom$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReqCloseRoom$Type extends MessageType<ReqCloseRoom> {
    constructor() {
        super("proto.ReqCloseRoom", [
            { no: 1, name: "roomId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ReqCloseRoom>): ReqCloseRoom {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.roomId = 0;
        message.token = "";
        if (value !== undefined)
            reflectionMergePartial<ReqCloseRoom>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReqCloseRoom): ReqCloseRoom {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 roomId */ 1:
                    message.roomId = reader.int32();
                    break;
                case /* string token */ 2:
                    message.token = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReqCloseRoom, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 roomId = 1; */
        if (message.roomId !== 0)
            writer.tag(1, WireType.Varint).int32(message.roomId);
        /* string token = 2; */
        if (message.token !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.token);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.ReqCloseRoom
 */
export const ReqCloseRoom = new ReqCloseRoom$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResCloseRoom$Type extends MessageType<ResCloseRoom> {
    constructor() {
        super("proto.ResCloseRoom", [
            { no: 1, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ResCloseRoom>): ResCloseRoom {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<ResCloseRoom>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResCloseRoom): ResCloseRoom {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 status */ 1:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResCloseRoom, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 status = 1; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.ResCloseRoom
 */
export const ResCloseRoom = new ResCloseRoom$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReqVerify$Type extends MessageType<ReqVerify> {
    constructor() {
        super("proto.ReqVerify", [
            { no: 1, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "code", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ReqVerify>): ReqVerify {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.email = "";
        message.code = "";
        if (value !== undefined)
            reflectionMergePartial<ReqVerify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReqVerify): ReqVerify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string email */ 1:
                    message.email = reader.string();
                    break;
                case /* string code */ 2:
                    message.code = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReqVerify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string email = 1; */
        if (message.email !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.email);
        /* string code = 2; */
        if (message.code !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.code);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.ReqVerify
 */
export const ReqVerify = new ReqVerify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResVerify$Type extends MessageType<ResVerify> {
    constructor() {
        super("proto.ResVerify", [
            { no: 1, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ResVerify>): ResVerify {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<ResVerify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResVerify): ResVerify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 status */ 1:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResVerify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 status = 1; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.ResVerify
 */
export const ResVerify = new ResVerify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReqChangePassword$Type extends MessageType<ReqChangePassword> {
    constructor() {
        super("proto.ReqChangePassword", [
            { no: 1, name: "oldPassword", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "newPassword", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ReqChangePassword>): ReqChangePassword {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.oldPassword = "";
        message.newPassword = "";
        if (value !== undefined)
            reflectionMergePartial<ReqChangePassword>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReqChangePassword): ReqChangePassword {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string oldPassword */ 1:
                    message.oldPassword = reader.string();
                    break;
                case /* string newPassword */ 2:
                    message.newPassword = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReqChangePassword, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string oldPassword = 1; */
        if (message.oldPassword !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.oldPassword);
        /* string newPassword = 2; */
        if (message.newPassword !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.newPassword);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.ReqChangePassword
 */
export const ReqChangePassword = new ReqChangePassword$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResChangePassword$Type extends MessageType<ResChangePassword> {
    constructor() {
        super("proto.ResChangePassword", [
            { no: 1, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ResChangePassword>): ResChangePassword {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<ResChangePassword>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResChangePassword): ResChangePassword {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 status */ 1:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResChangePassword, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 status = 1; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.ResChangePassword
 */
export const ResChangePassword = new ResChangePassword$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateExamRequest$Type extends MessageType<CreateExamRequest> {
    constructor() {
        super("proto.CreateExamRequest", [
            { no: 1, name: "exam", kind: "message", T: () => Exam }
        ]);
    }
    create(value?: PartialMessage<CreateExamRequest>): CreateExamRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateExamRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateExamRequest): CreateExamRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* proto.Exam exam */ 1:
                    message.exam = Exam.internalBinaryRead(reader, reader.uint32(), options, message.exam);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateExamRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* proto.Exam exam = 1; */
        if (message.exam)
            Exam.internalBinaryWrite(message.exam, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.CreateExamRequest
 */
export const CreateExamRequest = new CreateExamRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateExamResponse$Type extends MessageType<CreateExamResponse> {
    constructor() {
        super("proto.CreateExamResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "examId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "firstQuestionId", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CreateExamResponse>): CreateExamResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        message.message = "";
        message.examId = 0;
        message.firstQuestionId = 0;
        if (value !== undefined)
            reflectionMergePartial<CreateExamResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateExamResponse): CreateExamResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                case /* int32 examId */ 3:
                    message.examId = reader.int32();
                    break;
                case /* int32 firstQuestionId */ 4:
                    message.firstQuestionId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateExamResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        /* int32 examId = 3; */
        if (message.examId !== 0)
            writer.tag(3, WireType.Varint).int32(message.examId);
        /* int32 firstQuestionId = 4; */
        if (message.firstQuestionId !== 0)
            writer.tag(4, WireType.Varint).int32(message.firstQuestionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.CreateExamResponse
 */
export const CreateExamResponse = new CreateExamResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateExamRequest$Type extends MessageType<UpdateExamRequest> {
    constructor() {
        super("proto.UpdateExamRequest", [
            { no: 1, name: "exam", kind: "message", T: () => Exam }
        ]);
    }
    create(value?: PartialMessage<UpdateExamRequest>): UpdateExamRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateExamRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateExamRequest): UpdateExamRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* proto.Exam exam */ 1:
                    message.exam = Exam.internalBinaryRead(reader, reader.uint32(), options, message.exam);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateExamRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* proto.Exam exam = 1; */
        if (message.exam)
            Exam.internalBinaryWrite(message.exam, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.UpdateExamRequest
 */
export const UpdateExamRequest = new UpdateExamRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateExamResponse$Type extends MessageType<UpdateExamResponse> {
    constructor() {
        super("proto.UpdateExamResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateExamResponse>): UpdateExamResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<UpdateExamResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateExamResponse): UpdateExamResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateExamResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.UpdateExamResponse
 */
export const UpdateExamResponse = new UpdateExamResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteExamRequest$Type extends MessageType<DeleteExamRequest> {
    constructor() {
        super("proto.DeleteExamRequest", [
            { no: 1, name: "examId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "userId", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteExamRequest>): DeleteExamRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.examId = 0;
        message.userId = 0;
        if (value !== undefined)
            reflectionMergePartial<DeleteExamRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteExamRequest): DeleteExamRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 examId */ 1:
                    message.examId = reader.int32();
                    break;
                case /* int32 userId */ 2:
                    message.userId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteExamRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 examId = 1; */
        if (message.examId !== 0)
            writer.tag(1, WireType.Varint).int32(message.examId);
        /* int32 userId = 2; */
        if (message.userId !== 0)
            writer.tag(2, WireType.Varint).int32(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.DeleteExamRequest
 */
export const DeleteExamRequest = new DeleteExamRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteExamResponse$Type extends MessageType<DeleteExamResponse> {
    constructor() {
        super("proto.DeleteExamResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteExamResponse>): DeleteExamResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteExamResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteExamResponse): DeleteExamResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteExamResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.DeleteExamResponse
 */
export const DeleteExamResponse = new DeleteExamResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Exam$Type extends MessageType<Exam> {
    constructor() {
        super("proto.Exam", [
            { no: 1, name: "examId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "questions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Question },
            { no: 5, name: "imageUrl", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "createdAt", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "userId", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Exam>): Exam {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.examId = 0;
        message.title = "";
        message.description = "";
        message.questions = [];
        message.imageUrl = "";
        message.status = 0;
        message.createdAt = "";
        message.userId = 0;
        if (value !== undefined)
            reflectionMergePartial<Exam>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Exam): Exam {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 examId */ 1:
                    message.examId = reader.int32();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string description */ 3:
                    message.description = reader.string();
                    break;
                case /* repeated proto.Question questions */ 4:
                    message.questions.push(Question.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string imageUrl */ 5:
                    message.imageUrl = reader.string();
                    break;
                case /* int32 status */ 6:
                    message.status = reader.int32();
                    break;
                case /* string createdAt */ 7:
                    message.createdAt = reader.string();
                    break;
                case /* int32 userId */ 8:
                    message.userId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Exam, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 examId = 1; */
        if (message.examId !== 0)
            writer.tag(1, WireType.Varint).int32(message.examId);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string description = 3; */
        if (message.description !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        /* repeated proto.Question questions = 4; */
        for (let i = 0; i < message.questions.length; i++)
            Question.internalBinaryWrite(message.questions[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string imageUrl = 5; */
        if (message.imageUrl !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.imageUrl);
        /* int32 status = 6; */
        if (message.status !== 0)
            writer.tag(6, WireType.Varint).int32(message.status);
        /* string createdAt = 7; */
        if (message.createdAt !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.createdAt);
        /* int32 userId = 8; */
        if (message.userId !== 0)
            writer.tag(8, WireType.Varint).int32(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.Exam
 */
export const Exam = new Exam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Question$Type extends MessageType<Question> {
    constructor() {
        super("proto.Question", [
            { no: 1, name: "questionText", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "imageUrl", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "choices", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Choice },
            { no: 4, name: "questionIndex", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "time", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "questionId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "examId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Question>): Question {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.questionText = "";
        message.imageUrl = "";
        message.choices = [];
        message.questionIndex = 0;
        message.time = 0;
        message.questionId = 0;
        message.examId = 0;
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<Question>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Question): Question {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string questionText */ 1:
                    message.questionText = reader.string();
                    break;
                case /* string imageUrl */ 2:
                    message.imageUrl = reader.string();
                    break;
                case /* repeated proto.Choice choices */ 3:
                    message.choices.push(Choice.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 questionIndex */ 4:
                    message.questionIndex = reader.int32();
                    break;
                case /* int32 time */ 5:
                    message.time = reader.int32();
                    break;
                case /* int32 questionId */ 6:
                    message.questionId = reader.int32();
                    break;
                case /* int32 examId */ 7:
                    message.examId = reader.int32();
                    break;
                case /* int32 status */ 8:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Question, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string questionText = 1; */
        if (message.questionText !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.questionText);
        /* string imageUrl = 2; */
        if (message.imageUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.imageUrl);
        /* repeated proto.Choice choices = 3; */
        for (let i = 0; i < message.choices.length; i++)
            Choice.internalBinaryWrite(message.choices[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int32 questionIndex = 4; */
        if (message.questionIndex !== 0)
            writer.tag(4, WireType.Varint).int32(message.questionIndex);
        /* int32 time = 5; */
        if (message.time !== 0)
            writer.tag(5, WireType.Varint).int32(message.time);
        /* int32 questionId = 6; */
        if (message.questionId !== 0)
            writer.tag(6, WireType.Varint).int32(message.questionId);
        /* int32 examId = 7; */
        if (message.examId !== 0)
            writer.tag(7, WireType.Varint).int32(message.examId);
        /* int32 status = 8; */
        if (message.status !== 0)
            writer.tag(8, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.Question
 */
export const Question = new Question$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Choice$Type extends MessageType<Choice> {
    constructor() {
        super("proto.Choice", [
            { no: 1, name: "choiceText", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "imageUrl", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "isCorrect", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "choiceIndex", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "choiceId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "questionId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Choice>): Choice {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.choiceText = "";
        message.imageUrl = "";
        message.isCorrect = false;
        message.choiceIndex = 0;
        message.choiceId = 0;
        message.questionId = 0;
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<Choice>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Choice): Choice {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string choiceText */ 1:
                    message.choiceText = reader.string();
                    break;
                case /* string imageUrl */ 2:
                    message.imageUrl = reader.string();
                    break;
                case /* bool isCorrect */ 3:
                    message.isCorrect = reader.bool();
                    break;
                case /* int32 choiceIndex */ 4:
                    message.choiceIndex = reader.int32();
                    break;
                case /* int32 choiceId */ 5:
                    message.choiceId = reader.int32();
                    break;
                case /* int32 questionId */ 6:
                    message.questionId = reader.int32();
                    break;
                case /* int32 status */ 7:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Choice, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string choiceText = 1; */
        if (message.choiceText !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.choiceText);
        /* string imageUrl = 2; */
        if (message.imageUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.imageUrl);
        /* bool isCorrect = 3; */
        if (message.isCorrect !== false)
            writer.tag(3, WireType.Varint).bool(message.isCorrect);
        /* int32 choiceIndex = 4; */
        if (message.choiceIndex !== 0)
            writer.tag(4, WireType.Varint).int32(message.choiceIndex);
        /* int32 choiceId = 5; */
        if (message.choiceId !== 0)
            writer.tag(5, WireType.Varint).int32(message.choiceId);
        /* int32 questionId = 6; */
        if (message.questionId !== 0)
            writer.tag(6, WireType.Varint).int32(message.questionId);
        /* int32 status = 7; */
        if (message.status !== 0)
            writer.tag(7, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.Choice
 */
export const Choice = new Choice$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateQuestionRequest$Type extends MessageType<CreateQuestionRequest> {
    constructor() {
        super("proto.CreateQuestionRequest", [
            { no: 1, name: "examId", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CreateQuestionRequest>): CreateQuestionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.examId = 0;
        if (value !== undefined)
            reflectionMergePartial<CreateQuestionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateQuestionRequest): CreateQuestionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 examId */ 1:
                    message.examId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateQuestionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 examId = 1; */
        if (message.examId !== 0)
            writer.tag(1, WireType.Varint).int32(message.examId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.CreateQuestionRequest
 */
export const CreateQuestionRequest = new CreateQuestionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateQuestionResponse$Type extends MessageType<CreateQuestionResponse> {
    constructor() {
        super("proto.CreateQuestionResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "questionId", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CreateQuestionResponse>): CreateQuestionResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        message.questionId = 0;
        if (value !== undefined)
            reflectionMergePartial<CreateQuestionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateQuestionResponse): CreateQuestionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                case /* int32 questionId */ 2:
                    message.questionId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateQuestionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        /* int32 questionId = 2; */
        if (message.questionId !== 0)
            writer.tag(2, WireType.Varint).int32(message.questionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.CreateQuestionResponse
 */
export const CreateQuestionResponse = new CreateQuestionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateQuestionRequest$Type extends MessageType<UpdateQuestionRequest> {
    constructor() {
        super("proto.UpdateQuestionRequest", [
            { no: 1, name: "question", kind: "message", T: () => Question }
        ]);
    }
    create(value?: PartialMessage<UpdateQuestionRequest>): UpdateQuestionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateQuestionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateQuestionRequest): UpdateQuestionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* proto.Question question */ 1:
                    message.question = Question.internalBinaryRead(reader, reader.uint32(), options, message.question);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateQuestionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* proto.Question question = 1; */
        if (message.question)
            Question.internalBinaryWrite(message.question, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.UpdateQuestionRequest
 */
export const UpdateQuestionRequest = new UpdateQuestionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateQuestionResponse$Type extends MessageType<UpdateQuestionResponse> {
    constructor() {
        super("proto.UpdateQuestionResponse", [
            { no: 3, name: "question", kind: "message", T: () => Question },
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateQuestionResponse>): UpdateQuestionResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<UpdateQuestionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateQuestionResponse): UpdateQuestionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* proto.Question question */ 3:
                    message.question = Question.internalBinaryRead(reader, reader.uint32(), options, message.question);
                    break;
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateQuestionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* proto.Question question = 3; */
        if (message.question)
            Question.internalBinaryWrite(message.question, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.UpdateQuestionResponse
 */
export const UpdateQuestionResponse = new UpdateQuestionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteQuestionRequest$Type extends MessageType<DeleteQuestionRequest> {
    constructor() {
        super("proto.DeleteQuestionRequest", [
            { no: 1, name: "questionId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "userId", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteQuestionRequest>): DeleteQuestionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.questionId = 0;
        message.userId = 0;
        if (value !== undefined)
            reflectionMergePartial<DeleteQuestionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteQuestionRequest): DeleteQuestionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 questionId */ 1:
                    message.questionId = reader.int32();
                    break;
                case /* int32 userId */ 2:
                    message.userId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteQuestionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 questionId = 1; */
        if (message.questionId !== 0)
            writer.tag(1, WireType.Varint).int32(message.questionId);
        /* int32 userId = 2; */
        if (message.userId !== 0)
            writer.tag(2, WireType.Varint).int32(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.DeleteQuestionRequest
 */
export const DeleteQuestionRequest = new DeleteQuestionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteQuestionResponse$Type extends MessageType<DeleteQuestionResponse> {
    constructor() {
        super("proto.DeleteQuestionResponse", [
            { no: 3, name: "questionId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteQuestionResponse>): DeleteQuestionResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.questionId = 0;
        message.success = false;
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteQuestionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteQuestionResponse): DeleteQuestionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 questionId */ 3:
                    message.questionId = reader.int32();
                    break;
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteQuestionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 questionId = 3; */
        if (message.questionId !== 0)
            writer.tag(3, WireType.Varint).int32(message.questionId);
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.DeleteQuestionResponse
 */
export const DeleteQuestionResponse = new DeleteQuestionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetQuestionRequest$Type extends MessageType<GetQuestionRequest> {
    constructor() {
        super("proto.GetQuestionRequest", [
            { no: 1, name: "questionId", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetQuestionRequest>): GetQuestionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.questionId = 0;
        if (value !== undefined)
            reflectionMergePartial<GetQuestionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetQuestionRequest): GetQuestionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 questionId */ 1:
                    message.questionId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetQuestionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 questionId = 1; */
        if (message.questionId !== 0)
            writer.tag(1, WireType.Varint).int32(message.questionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.GetQuestionRequest
 */
export const GetQuestionRequest = new GetQuestionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetQuestionResponse$Type extends MessageType<GetQuestionResponse> {
    constructor() {
        super("proto.GetQuestionResponse", [
            { no: 1, name: "question", kind: "message", T: () => Question }
        ]);
    }
    create(value?: PartialMessage<GetQuestionResponse>): GetQuestionResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetQuestionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetQuestionResponse): GetQuestionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* proto.Question question */ 1:
                    message.question = Question.internalBinaryRead(reader, reader.uint32(), options, message.question);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetQuestionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* proto.Question question = 1; */
        if (message.question)
            Question.internalBinaryWrite(message.question, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.GetQuestionResponse
 */
export const GetQuestionResponse = new GetQuestionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetExamRequest$Type extends MessageType<GetExamRequest> {
    constructor() {
        super("proto.GetExamRequest", [
            { no: 1, name: "examId", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetExamRequest>): GetExamRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.examId = 0;
        if (value !== undefined)
            reflectionMergePartial<GetExamRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetExamRequest): GetExamRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 examId */ 1:
                    message.examId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetExamRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 examId = 1; */
        if (message.examId !== 0)
            writer.tag(1, WireType.Varint).int32(message.examId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.GetExamRequest
 */
export const GetExamRequest = new GetExamRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetExamResponse$Type extends MessageType<GetExamResponse> {
    constructor() {
        super("proto.GetExamResponse", [
            { no: 1, name: "exam", kind: "message", T: () => Exam }
        ]);
    }
    create(value?: PartialMessage<GetExamResponse>): GetExamResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetExamResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetExamResponse): GetExamResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* proto.Exam exam */ 1:
                    message.exam = Exam.internalBinaryRead(reader, reader.uint32(), options, message.exam);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetExamResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* proto.Exam exam = 1; */
        if (message.exam)
            Exam.internalBinaryWrite(message.exam, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.GetExamResponse
 */
export const GetExamResponse = new GetExamResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAllExamRequest$Type extends MessageType<GetAllExamRequest> {
    constructor() {
        super("proto.GetAllExamRequest", [
            { no: 1, name: "userId", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetAllExamRequest>): GetAllExamRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = 0;
        if (value !== undefined)
            reflectionMergePartial<GetAllExamRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAllExamRequest): GetAllExamRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 userId */ 1:
                    message.userId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAllExamRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 userId = 1; */
        if (message.userId !== 0)
            writer.tag(1, WireType.Varint).int32(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.GetAllExamRequest
 */
export const GetAllExamRequest = new GetAllExamRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAllExamResponse$Type extends MessageType<GetAllExamResponse> {
    constructor() {
        super("proto.GetAllExamResponse", [
            { no: 1, name: "exam", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Exam }
        ]);
    }
    create(value?: PartialMessage<GetAllExamResponse>): GetAllExamResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.exam = [];
        if (value !== undefined)
            reflectionMergePartial<GetAllExamResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAllExamResponse): GetAllExamResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated proto.Exam exam */ 1:
                    message.exam.push(Exam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAllExamResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated proto.Exam exam = 1; */
        for (let i = 0; i < message.exam.length; i++)
            Exam.internalBinaryWrite(message.exam[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.GetAllExamResponse
 */
export const GetAllExamResponse = new GetAllExamResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReqStartExam$Type extends MessageType<ReqStartExam> {
    constructor() {
        super("proto.ReqStartExam", [
            { no: 1, name: "roomId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "examId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "hostId", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ReqStartExam>): ReqStartExam {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.roomId = 0;
        message.examId = 0;
        message.hostId = 0;
        if (value !== undefined)
            reflectionMergePartial<ReqStartExam>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReqStartExam): ReqStartExam {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 roomId */ 1:
                    message.roomId = reader.int32();
                    break;
                case /* int32 examId */ 2:
                    message.examId = reader.int32();
                    break;
                case /* int32 hostId */ 3:
                    message.hostId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReqStartExam, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 roomId = 1; */
        if (message.roomId !== 0)
            writer.tag(1, WireType.Varint).int32(message.roomId);
        /* int32 examId = 2; */
        if (message.examId !== 0)
            writer.tag(2, WireType.Varint).int32(message.examId);
        /* int32 hostId = 3; */
        if (message.hostId !== 0)
            writer.tag(3, WireType.Varint).int32(message.hostId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.ReqStartExam
 */
export const ReqStartExam = new ReqStartExam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResStartExam$Type extends MessageType<ResStartExam> {
    constructor() {
        super("proto.ResStartExam", [
            { no: 1, name: "examSessionId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "question", kind: "message", T: () => Question }
        ]);
    }
    create(value?: PartialMessage<ResStartExam>): ResStartExam {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.examSessionId = 0;
        if (value !== undefined)
            reflectionMergePartial<ResStartExam>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResStartExam): ResStartExam {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 examSessionId */ 1:
                    message.examSessionId = reader.int32();
                    break;
                case /* proto.Question question */ 2:
                    message.question = Question.internalBinaryRead(reader, reader.uint32(), options, message.question);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResStartExam, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 examSessionId = 1; */
        if (message.examSessionId !== 0)
            writer.tag(1, WireType.Varint).int32(message.examSessionId);
        /* proto.Question question = 2; */
        if (message.question)
            Question.internalBinaryWrite(message.question, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.ResStartExam
 */
export const ResStartExam = new ResStartExam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReqEndExam$Type extends MessageType<ReqEndExam> {
    constructor() {
        super("proto.ReqEndExam", [
            { no: 1, name: "examId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "hostId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "roomId", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ReqEndExam>): ReqEndExam {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.examId = 0;
        message.hostId = 0;
        message.roomId = 0;
        if (value !== undefined)
            reflectionMergePartial<ReqEndExam>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReqEndExam): ReqEndExam {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 examId */ 1:
                    message.examId = reader.int32();
                    break;
                case /* int32 hostId */ 2:
                    message.hostId = reader.int32();
                    break;
                case /* int32 roomId */ 3:
                    message.roomId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReqEndExam, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 examId = 1; */
        if (message.examId !== 0)
            writer.tag(1, WireType.Varint).int32(message.examId);
        /* int32 hostId = 2; */
        if (message.hostId !== 0)
            writer.tag(2, WireType.Varint).int32(message.hostId);
        /* int32 roomId = 3; */
        if (message.roomId !== 0)
            writer.tag(3, WireType.Varint).int32(message.roomId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.ReqEndExam
 */
export const ReqEndExam = new ReqEndExam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResEndExam$Type extends MessageType<ResEndExam> {
    constructor() {
        super("proto.ResEndExam", [
            { no: 1, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "resRoomScore", kind: "message", T: () => RoomScore }
        ]);
    }
    create(value?: PartialMessage<ResEndExam>): ResEndExam {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<ResEndExam>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResEndExam): ResEndExam {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 status */ 1:
                    message.status = reader.int32();
                    break;
                case /* proto.RoomScore resRoomScore */ 2:
                    message.resRoomScore = RoomScore.internalBinaryRead(reader, reader.uint32(), options, message.resRoomScore);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResEndExam, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 status = 1; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).int32(message.status);
        /* proto.RoomScore resRoomScore = 2; */
        if (message.resRoomScore)
            RoomScore.internalBinaryWrite(message.resRoomScore, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.ResEndExam
 */
export const ResEndExam = new ResEndExam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReqGetNextQuestion$Type extends MessageType<ReqGetNextQuestion> {
    constructor() {
        super("proto.ReqGetNextQuestion", [
            { no: 1, name: "examId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "questionId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "roomId", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ReqGetNextQuestion>): ReqGetNextQuestion {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.examId = 0;
        message.questionId = 0;
        message.roomId = 0;
        if (value !== undefined)
            reflectionMergePartial<ReqGetNextQuestion>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReqGetNextQuestion): ReqGetNextQuestion {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 examId */ 1:
                    message.examId = reader.int32();
                    break;
                case /* int32 questionId */ 2:
                    message.questionId = reader.int32();
                    break;
                case /* int32 roomId */ 3:
                    message.roomId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReqGetNextQuestion, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 examId = 1; */
        if (message.examId !== 0)
            writer.tag(1, WireType.Varint).int32(message.examId);
        /* int32 questionId = 2; */
        if (message.questionId !== 0)
            writer.tag(2, WireType.Varint).int32(message.questionId);
        /* int32 roomId = 3; */
        if (message.roomId !== 0)
            writer.tag(3, WireType.Varint).int32(message.roomId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.ReqGetNextQuestion
 */
export const ReqGetNextQuestion = new ReqGetNextQuestion$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResGetNextQuestion$Type extends MessageType<ResGetNextQuestion> {
    constructor() {
        super("proto.ResGetNextQuestion", [
            { no: 1, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "question", kind: "message", T: () => Question },
            { no: 3, name: "totalQuestion", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ResGetNextQuestion>): ResGetNextQuestion {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = 0;
        message.totalQuestion = 0;
        if (value !== undefined)
            reflectionMergePartial<ResGetNextQuestion>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResGetNextQuestion): ResGetNextQuestion {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 status */ 1:
                    message.status = reader.int32();
                    break;
                case /* proto.Question question */ 2:
                    message.question = Question.internalBinaryRead(reader, reader.uint32(), options, message.question);
                    break;
                case /* int32 totalQuestion */ 3:
                    message.totalQuestion = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResGetNextQuestion, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 status = 1; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).int32(message.status);
        /* proto.Question question = 2; */
        if (message.question)
            Question.internalBinaryWrite(message.question, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int32 totalQuestion = 3; */
        if (message.totalQuestion !== 0)
            writer.tag(3, WireType.Varint).int32(message.totalQuestion);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.ResGetNextQuestion
 */
export const ResGetNextQuestion = new ResGetNextQuestion$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReqCheckQuestionAnswer$Type extends MessageType<ReqCheckQuestionAnswer> {
    constructor() {
        super("proto.ReqCheckQuestionAnswer", [
            { no: 3, name: "examSessionId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 1, name: "userId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "questionId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "choiceId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "roomId", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ReqCheckQuestionAnswer>): ReqCheckQuestionAnswer {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.examSessionId = 0;
        message.userId = 0;
        message.questionId = 0;
        message.choiceId = 0;
        message.roomId = 0;
        if (value !== undefined)
            reflectionMergePartial<ReqCheckQuestionAnswer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReqCheckQuestionAnswer): ReqCheckQuestionAnswer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 examSessionId */ 3:
                    message.examSessionId = reader.int32();
                    break;
                case /* int32 userId */ 1:
                    message.userId = reader.int32();
                    break;
                case /* int32 questionId */ 2:
                    message.questionId = reader.int32();
                    break;
                case /* int32 choiceId */ 4:
                    message.choiceId = reader.int32();
                    break;
                case /* int32 roomId */ 5:
                    message.roomId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReqCheckQuestionAnswer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 examSessionId = 3; */
        if (message.examSessionId !== 0)
            writer.tag(3, WireType.Varint).int32(message.examSessionId);
        /* int32 userId = 1; */
        if (message.userId !== 0)
            writer.tag(1, WireType.Varint).int32(message.userId);
        /* int32 questionId = 2; */
        if (message.questionId !== 0)
            writer.tag(2, WireType.Varint).int32(message.questionId);
        /* int32 choiceId = 4; */
        if (message.choiceId !== 0)
            writer.tag(4, WireType.Varint).int32(message.choiceId);
        /* int32 roomId = 5; */
        if (message.roomId !== 0)
            writer.tag(5, WireType.Varint).int32(message.roomId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.ReqCheckQuestionAnswer
 */
export const ReqCheckQuestionAnswer = new ReqCheckQuestionAnswer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResCheckQuestionAnswer$Type extends MessageType<ResCheckQuestionAnswer> {
    constructor() {
        super("proto.ResCheckQuestionAnswer", [
            { no: 1, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "questionId", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ResCheckQuestionAnswer>): ResCheckQuestionAnswer {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = 0;
        message.questionId = 0;
        if (value !== undefined)
            reflectionMergePartial<ResCheckQuestionAnswer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResCheckQuestionAnswer): ResCheckQuestionAnswer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 status */ 1:
                    message.status = reader.int32();
                    break;
                case /* int32 questionId */ 2:
                    message.questionId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResCheckQuestionAnswer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 status = 1; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).int32(message.status);
        /* int32 questionId = 2; */
        if (message.questionId !== 0)
            writer.tag(2, WireType.Varint).int32(message.questionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.ResCheckQuestionAnswer
 */
export const ResCheckQuestionAnswer = new ResCheckQuestionAnswer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserScore$Type extends MessageType<UserScore> {
    constructor() {
        super("proto.UserScore", [
            { no: 1, name: "userName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "score", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<UserScore>): UserScore {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userName = "";
        message.score = 0;
        if (value !== undefined)
            reflectionMergePartial<UserScore>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserScore): UserScore {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string userName */ 1:
                    message.userName = reader.string();
                    break;
                case /* int32 score */ 2:
                    message.score = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserScore, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string userName = 1; */
        if (message.userName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userName);
        /* int32 score = 2; */
        if (message.score !== 0)
            writer.tag(2, WireType.Varint).int32(message.score);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.UserScore
 */
export const UserScore = new UserScore$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomScore$Type extends MessageType<RoomScore> {
    constructor() {
        super("proto.RoomScore", [
            { no: 2, name: "totalQuestion", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 1, name: "userScores", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => UserScore }
        ]);
    }
    create(value?: PartialMessage<RoomScore>): RoomScore {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.totalQuestion = 0;
        message.userScores = [];
        if (value !== undefined)
            reflectionMergePartial<RoomScore>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomScore): RoomScore {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 totalQuestion */ 2:
                    message.totalQuestion = reader.int32();
                    break;
                case /* repeated proto.UserScore userScores */ 1:
                    message.userScores.push(UserScore.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomScore, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 totalQuestion = 2; */
        if (message.totalQuestion !== 0)
            writer.tag(2, WireType.Varint).int32(message.totalQuestion);
        /* repeated proto.UserScore userScores = 1; */
        for (let i = 0; i < message.userScores.length; i++)
            UserScore.internalBinaryWrite(message.userScores[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.RoomScore
 */
export const RoomScore = new RoomScore$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReqGetRoomScore$Type extends MessageType<ReqGetRoomScore> {
    constructor() {
        super("proto.ReqGetRoomScore", [
            { no: 1, name: "roomId", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ReqGetRoomScore>): ReqGetRoomScore {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.roomId = 0;
        if (value !== undefined)
            reflectionMergePartial<ReqGetRoomScore>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReqGetRoomScore): ReqGetRoomScore {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 roomId */ 1:
                    message.roomId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReqGetRoomScore, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 roomId = 1; */
        if (message.roomId !== 0)
            writer.tag(1, WireType.Varint).int32(message.roomId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.ReqGetRoomScore
 */
export const ReqGetRoomScore = new ReqGetRoomScore$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResGetRoomScore$Type extends MessageType<ResGetRoomScore> {
    constructor() {
        super("proto.ResGetRoomScore", [
            { no: 1, name: "roomScore", kind: "message", T: () => RoomScore }
        ]);
    }
    create(value?: PartialMessage<ResGetRoomScore>): ResGetRoomScore {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResGetRoomScore>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResGetRoomScore): ResGetRoomScore {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* proto.RoomScore roomScore */ 1:
                    message.roomScore = RoomScore.internalBinaryRead(reader, reader.uint32(), options, message.roomScore);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResGetRoomScore, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* proto.RoomScore roomScore = 1; */
        if (message.roomScore)
            RoomScore.internalBinaryWrite(message.roomScore, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.ResGetRoomScore
 */
export const ResGetRoomScore = new ResGetRoomScore$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Report$Type extends MessageType<Report> {
    constructor() {
        super("proto.Report", [
            { no: 5, name: "examSessionId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 1, name: "ExamTitle", kind: "scalar", jsonName: "ExamTitle", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "HostName", kind: "scalar", jsonName: "HostName", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "startTime", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "endTime", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "roomScore", kind: "message", T: () => RoomScore }
        ]);
    }
    create(value?: PartialMessage<Report>): Report {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.examSessionId = 0;
        message.examTitle = "";
        message.hostName = "";
        message.startTime = "";
        message.endTime = "";
        if (value !== undefined)
            reflectionMergePartial<Report>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Report): Report {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 examSessionId */ 5:
                    message.examSessionId = reader.int32();
                    break;
                case /* string ExamTitle = 1 [json_name = "ExamTitle"];*/ 1:
                    message.examTitle = reader.string();
                    break;
                case /* string HostName = 2 [json_name = "HostName"];*/ 2:
                    message.hostName = reader.string();
                    break;
                case /* string startTime */ 3:
                    message.startTime = reader.string();
                    break;
                case /* string endTime */ 4:
                    message.endTime = reader.string();
                    break;
                case /* proto.RoomScore roomScore */ 6:
                    message.roomScore = RoomScore.internalBinaryRead(reader, reader.uint32(), options, message.roomScore);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Report, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 examSessionId = 5; */
        if (message.examSessionId !== 0)
            writer.tag(5, WireType.Varint).int32(message.examSessionId);
        /* string ExamTitle = 1 [json_name = "ExamTitle"]; */
        if (message.examTitle !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.examTitle);
        /* string HostName = 2 [json_name = "HostName"]; */
        if (message.hostName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.hostName);
        /* string startTime = 3; */
        if (message.startTime !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.startTime);
        /* string endTime = 4; */
        if (message.endTime !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.endTime);
        /* proto.RoomScore roomScore = 6; */
        if (message.roomScore)
            RoomScore.internalBinaryWrite(message.roomScore, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.Report
 */
export const Report = new Report$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReqGetReport$Type extends MessageType<ReqGetReport> {
    constructor() {
        super("proto.ReqGetReport", [
            { no: 1, name: "examSessionId", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ReqGetReport>): ReqGetReport {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.examSessionId = 0;
        if (value !== undefined)
            reflectionMergePartial<ReqGetReport>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReqGetReport): ReqGetReport {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 examSessionId */ 1:
                    message.examSessionId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReqGetReport, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 examSessionId = 1; */
        if (message.examSessionId !== 0)
            writer.tag(1, WireType.Varint).int32(message.examSessionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.ReqGetReport
 */
export const ReqGetReport = new ReqGetReport$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResGetReport$Type extends MessageType<ResGetReport> {
    constructor() {
        super("proto.ResGetReport", [
            { no: 1, name: "report", kind: "message", T: () => Report }
        ]);
    }
    create(value?: PartialMessage<ResGetReport>): ResGetReport {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResGetReport>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResGetReport): ResGetReport {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* proto.Report report */ 1:
                    message.report = Report.internalBinaryRead(reader, reader.uint32(), options, message.report);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResGetReport, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* proto.Report report = 1; */
        if (message.report)
            Report.internalBinaryWrite(message.report, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.ResGetReport
 */
export const ResGetReport = new ResGetReport$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReqGetAllReportByHostId$Type extends MessageType<ReqGetAllReportByHostId> {
    constructor() {
        super("proto.ReqGetAllReportByHostId", [
            { no: 1, name: "hostId", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ReqGetAllReportByHostId>): ReqGetAllReportByHostId {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.hostId = 0;
        if (value !== undefined)
            reflectionMergePartial<ReqGetAllReportByHostId>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReqGetAllReportByHostId): ReqGetAllReportByHostId {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 hostId */ 1:
                    message.hostId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReqGetAllReportByHostId, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 hostId = 1; */
        if (message.hostId !== 0)
            writer.tag(1, WireType.Varint).int32(message.hostId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.ReqGetAllReportByHostId
 */
export const ReqGetAllReportByHostId = new ReqGetAllReportByHostId$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResGetAllReportByHostId$Type extends MessageType<ResGetAllReportByHostId> {
    constructor() {
        super("proto.ResGetAllReportByHostId", [
            { no: 1, name: "reports", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Report }
        ]);
    }
    create(value?: PartialMessage<ResGetAllReportByHostId>): ResGetAllReportByHostId {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.reports = [];
        if (value !== undefined)
            reflectionMergePartial<ResGetAllReportByHostId>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResGetAllReportByHostId): ResGetAllReportByHostId {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated proto.Report reports */ 1:
                    message.reports.push(Report.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResGetAllReportByHostId, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated proto.Report reports = 1; */
        for (let i = 0; i < message.reports.length; i++)
            Report.internalBinaryWrite(message.reports[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.ResGetAllReportByHostId
 */
export const ResGetAllReportByHostId = new ResGetAllReportByHostId$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReqGetAllReportByPlayerId$Type extends MessageType<ReqGetAllReportByPlayerId> {
    constructor() {
        super("proto.ReqGetAllReportByPlayerId", [
            { no: 1, name: "userId", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ReqGetAllReportByPlayerId>): ReqGetAllReportByPlayerId {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = 0;
        if (value !== undefined)
            reflectionMergePartial<ReqGetAllReportByPlayerId>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReqGetAllReportByPlayerId): ReqGetAllReportByPlayerId {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 userId */ 1:
                    message.userId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReqGetAllReportByPlayerId, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 userId = 1; */
        if (message.userId !== 0)
            writer.tag(1, WireType.Varint).int32(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.ReqGetAllReportByPlayerId
 */
export const ReqGetAllReportByPlayerId = new ReqGetAllReportByPlayerId$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResGetAllReportByPlayerId$Type extends MessageType<ResGetAllReportByPlayerId> {
    constructor() {
        super("proto.ResGetAllReportByPlayerId", [
            { no: 1, name: "reports", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Report }
        ]);
    }
    create(value?: PartialMessage<ResGetAllReportByPlayerId>): ResGetAllReportByPlayerId {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.reports = [];
        if (value !== undefined)
            reflectionMergePartial<ResGetAllReportByPlayerId>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResGetAllReportByPlayerId): ResGetAllReportByPlayerId {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated proto.Report reports */ 1:
                    message.reports.push(Report.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResGetAllReportByPlayerId, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated proto.Report reports = 1; */
        for (let i = 0; i < message.reports.length; i++)
            Report.internalBinaryWrite(message.reports[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.ResGetAllReportByPlayerId
 */
export const ResGetAllReportByPlayerId = new ResGetAllReportByPlayerId$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReqLockScreen$Type extends MessageType<ReqLockScreen> {
    constructor() {
        super("proto.ReqLockScreen", [
            { no: 1, name: "userId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "roomId", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ReqLockScreen>): ReqLockScreen {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = 0;
        message.roomId = 0;
        if (value !== undefined)
            reflectionMergePartial<ReqLockScreen>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReqLockScreen): ReqLockScreen {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 userId */ 1:
                    message.userId = reader.int32();
                    break;
                case /* int32 roomId */ 2:
                    message.roomId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReqLockScreen, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 userId = 1; */
        if (message.userId !== 0)
            writer.tag(1, WireType.Varint).int32(message.userId);
        /* int32 roomId = 2; */
        if (message.roomId !== 0)
            writer.tag(2, WireType.Varint).int32(message.roomId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.ReqLockScreen
 */
export const ReqLockScreen = new ReqLockScreen$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResLockScreen$Type extends MessageType<ResLockScreen> {
    constructor() {
        super("proto.ResLockScreen", [
            { no: 1, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ResLockScreen>): ResLockScreen {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<ResLockScreen>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResLockScreen): ResLockScreen {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 status */ 1:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResLockScreen, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 status = 1; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.ResLockScreen
 */
export const ResLockScreen = new ResLockScreen$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReqUnlockScreen$Type extends MessageType<ReqUnlockScreen> {
    constructor() {
        super("proto.ReqUnlockScreen", [
            { no: 1, name: "userId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "roomId", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ReqUnlockScreen>): ReqUnlockScreen {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = 0;
        message.roomId = 0;
        if (value !== undefined)
            reflectionMergePartial<ReqUnlockScreen>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReqUnlockScreen): ReqUnlockScreen {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 userId */ 1:
                    message.userId = reader.int32();
                    break;
                case /* int32 roomId */ 2:
                    message.roomId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReqUnlockScreen, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 userId = 1; */
        if (message.userId !== 0)
            writer.tag(1, WireType.Varint).int32(message.userId);
        /* int32 roomId = 2; */
        if (message.roomId !== 0)
            writer.tag(2, WireType.Varint).int32(message.roomId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.ReqUnlockScreen
 */
export const ReqUnlockScreen = new ReqUnlockScreen$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResUnlockScreen$Type extends MessageType<ResUnlockScreen> {
    constructor() {
        super("proto.ResUnlockScreen", [
            { no: 1, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ResUnlockScreen>): ResUnlockScreen {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<ResUnlockScreen>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResUnlockScreen): ResUnlockScreen {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 status */ 1:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResUnlockScreen, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 status = 1; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.ResUnlockScreen
 */
export const ResUnlockScreen = new ResUnlockScreen$Type();
